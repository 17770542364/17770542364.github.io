<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>实习记录(1)</title>
      <link href="/2022/07/11/shi-xi-ji-lu-1/"/>
      <url>/2022/07/11/shi-xi-ji-lu-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/11/hello-world/"/>
      <url>/2022/07/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WebRTC客户端(一) WebRTC架构</title>
      <link href="/2022/07/05/webrtc-ke-hu-duan-yi-webrtc-jia-gou/"/>
      <url>/2022/07/05/webrtc-ke-hu-duan-yi-webrtc-jia-gou/</url>
      
        <content type="html"><![CDATA[<h2 id="WebRTC整体架构"><a href="#WebRTC整体架构" class="headerlink" title="WebRTC整体架构"></a>WebRTC整体架构</h2><img src="/2022/07/05/webrtc-ke-hu-duan-yi-webrtc-jia-gou/image-20220616150935297.png" class="" title="image-20220616150935297"><h2 id="WebRTC目录结构"><a href="#WebRTC目录结构" class="headerlink" title="WebRTC目录结构"></a>WebRTC目录结构</h2><img src="/2022/07/05/webrtc-ke-hu-duan-yi-webrtc-jia-gou/image-20220616151953427.png" class="" title="image-20220616151953427"><img src="/2022/07/05/webrtc-ke-hu-duan-yi-webrtc-jia-gou/image-20220616152128809.png" class="" title="image-20220616152128809"><h2 id="WebRTC-Modules目录"><a href="#WebRTC-Modules目录" class="headerlink" title="WebRTC Modules目录"></a>WebRTC Modules目录</h2><img src="/2022/07/05/webrtc-ke-hu-duan-yi-webrtc-jia-gou/image-20220616152630603.png" class="" title="image-20220616152630603"><img src="/2022/07/05/webrtc-ke-hu-duan-yi-webrtc-jia-gou/image-20220616152810130.png" class="" title="image-20220616152810130"><h2 id="WebRTC运行机制"><a href="#WebRTC运行机制" class="headerlink" title="WebRTC运行机制"></a>WebRTC运行机制</h2><h3 id="轨与流"><a href="#轨与流" class="headerlink" title="轨与流"></a>轨与流</h3><ul><li>Track 轨 各个轨之间保持平行</li><li>MediaStream 流 每个流里面包括了多条轨</li></ul><h3 id="WebRTC重要的类"><a href="#WebRTC重要的类" class="headerlink" title="WebRTC重要的类"></a>WebRTC重要的类</h3><ul><li>MediaStream</li><li>RTCPeerConnection </li><li>RTCDataChannel 非音视频的数据通过这个类进行传输</li></ul><h3 id="PeerConnection调用过程"><a href="#PeerConnection调用过程" class="headerlink" title="PeerConnection调用过程"></a>PeerConnection调用过程</h3><img src="/2022/07/05/webrtc-ke-hu-duan-yi-webrtc-jia-gou/image-20220616160704314.png" class="" title="image-20220616160704314"><h3 id="调用时序图"><a href="#调用时序图" class="headerlink" title="调用时序图"></a>调用时序图</h3><img src="/2022/07/05/webrtc-ke-hu-duan-yi-webrtc-jia-gou/image-20220616165550065.png" class="" title="image-20220616165550065">]]></content>
      
      
      <categories>
          
          <category> 音视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebRTC </tag>
            
            <tag> 音视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步IO事件处理</title>
      <link href="/2022/07/05/yi-bu-io-shi-jian-chu-li/"/>
      <url>/2022/07/05/yi-bu-io-shi-jian-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="一、通过fork的方式实现高性能网络服务器"><a href="#一、通过fork的方式实现高性能网络服务器" class="headerlink" title="一、通过fork的方式实现高性能网络服务器"></a>一、通过fork的方式实现高性能网络服务器</h2><ul><li>每收到一个连接就创建一个子进程</li><li>父进程负责接收连接</li><li>通过fork创建子进程</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;unistd.h&gt;#include &lt;netinet/in.h&gt;#include &lt;sys/socket.h&gt;#include &lt;string.h&gt;#define PORT 8111#define MESSAGE_LEN 1024int main(int argc, char* argv[]){    int ret = -1;    int on = 1;    int backlog = 10;    pid_t pid;    int socket_fd, accept_fd;    struct sockaddr_in localaddr, remoteaddr;    char in_buff[MESSAGE_LEN] = {0,};    socket_fd = socket(AF_INET, SOCK_STREAM, 0);    if (socket_fd == -1){        std::cout &lt;&lt; "Failed to create socket!" &lt;&lt; std::endl;        exit(-1);    }    ret = setsockopt(socket_fd, SOL_SOCKET, SO_REUSEADDR, &amp;on, sizeof(on));    if (ret == -1) {        std::cout &lt;&lt; "Failed to set socket options!" &lt;&lt; std::endl;    }    localaddr.sin_family = AF_INET;    localaddr.sin_port = PORT;    localaddr.sin_addr.s_addr = INADDR_ANY;    bzero(&amp;(localaddr.sin_zero), 8);    ret = bind(socket_fd, (struct sockaddr *)&amp;localaddr, sizeof(struct    sockaddr));    if (ret == -1) {        std::cout &lt;&lt; "Failed to bind addr!" &lt;&lt; std::endl;        exit(-1);    }    ret = listen(socket_fd, backlog);    if (ret == -1) {        std::cout &lt;&lt; "Failed to listen socket!" &lt;&lt; std::endl;        exit(-1);    }    for (;;) {        socklen_t addr_len = sizeof(struct sockaddr);        accept_fd = accept(socket_fd, (struct sockaddr *) &amp;remoteaddr,        &amp;addr_len);        pid = fork();        if (pid == 0) {            for (;;) {                ret = recv(accept_fd, (void *)in_buff, MESSAGE_LEN, 0);                if (ret == 0) {                    break;                }                std::cout &lt;&lt; "recv:" &lt;&lt; in_buff &lt;&lt; std::endl;                  send(accept_fd, (void*)in_buff, MESSAGE_LEN, 0);            }        }    }    if (pid != 0) {        close(accept_fd);    }    return 0;}  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fork方式带来的问题</p><ul><li>资源被长期占用</li><li>分配子进程花费时间长</li></ul><h2 id="二、通过select实现高性能网络服务器"><a href="#二、通过select实现高性能网络服务器" class="headerlink" title="二、通过select实现高性能网络服务器"></a>二、通过select实现高性能网络服务器</h2><h4 id="什么是异步io"><a href="#什么是异步io" class="headerlink" title="什么是异步io"></a>什么是异步io</h4><p>异步io是指以事件触发的机制来对io操作进行处理</p><p>与多进程和多线程技术相比，异步io技术的最大优势的系统开销小，系统不必创建进程/线程，也不必维护这些进程/线程，从而大大减少了系统的开销</p><h4 id="select方式实现"><a href="#select方式实现" class="headerlink" title="select方式实现"></a>select方式实现</h4><ul><li>遍历文件描述符集中的所有描述符，找出有变化的描述符</li><li>对于监听的socket和数据处理的socket要区别对待</li><li>socket必须设置为非阻塞方式工作</li></ul><h4 id="重要API"><a href="#重要API" class="headerlink" title="重要API"></a>重要API</h4><pre class="line-numbers language-none"><code class="language-none">FD_ZERO\FD_SET\FD_ISSET<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">flag fcntl(fd, F_SETFL/F_GETFL, flag)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">events select(nfds, readfds, writefds, exceptfds, timeout)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="select函数输入参数的意义"><a href="#select函数输入参数的意义" class="headerlink" title="select函数输入参数的意义"></a>select函数输入参数的意义</h4><ul><li>需要关注的文件描述符</li><li>对每个文件描述符需要关注的状态（读、写、异常）</li><li>要等待的时间（永远、一段时间、不等待）</li></ul><h4 id="从select函数得到的信息"><a href="#从select函数得到的信息" class="headerlink" title="从select函数得到的信息"></a>从select函数得到的信息</h4><ul><li>已经做好准备的文件描述符的个数</li><li>对于读、写、异常，哪些文件描述符准备好了</li></ul><h4 id="理解select模型"><a href="#理解select模型" class="headerlink" title="理解select模型"></a>理解select模型</h4><ul><li>理解select模型的关键在于理解fd_set类型</li><li>fd_set就是多个整形字的集合，每个bit代表一个文件描述符</li><li>FD_ZERO表示将所有位置0</li><li>FD_SET是将fd_set中的某一位置1</li><li>select函数执行后，系统会修改fd_set中的内容</li><li>select函数执行后，应用层要重新设置fd_set中的内容</li></ul><h2 id="三、通过epoll实现高性能网络服务器"><a href="#三、通过epoll实现高性能网络服务器" class="headerlink" title="三、通过epoll实现高性能网络服务器"></a>三、通过epoll实现高性能网络服务器</h2><h4 id="使用epoll的好处"><a href="#使用epoll的好处" class="headerlink" title="使用epoll的好处"></a>使用epoll的好处</h4><ul><li>没有文件描述符的限制</li><li>工作效率不会随着文件描述符的增加而下降 </li><li>epoll经过系统优化更加高效</li></ul><h4 id="epoll事件的触发模式"><a href="#epoll事件的触发模式" class="headerlink" title="epoll事件的触发模式"></a>epoll事件的触发模式</h4><ul><li>水平触发 如果没有即时处理，则反复触发</li><li>边缘触发 只触发一次</li></ul><h4 id="epoll重要的API"><a href="#epoll重要的API" class="headerlink" title="epoll重要的API"></a>epoll重要的API</h4><pre class="line-numbers language-none"><code class="language-none">int epoll_create() 参数无意义，可忽略<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">int epoll_ctl(epfd, op, fd, struct epoll_event *event)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">int epoll_wait(epfd, events, maxevents, timeout)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="epoll事件"><a href="#epoll事件" class="headerlink" title="epoll事件"></a>epoll事件</h4><ul><li>EPOLLET设置为边缘触发</li><li>EPOLLIN     设置读事件</li><li>EPOLLOUT   设置写事件</li></ul><h4 id="epoll-ctl相关操作"><a href="#epoll-ctl相关操作" class="headerlink" title="epoll_ctl相关操作"></a>epoll_ctl相关操作</h4><ul><li>EPOLL_CTL_ADD</li><li>EPOLL_CTL_MOD</li><li>EPOLL_CTL_DEL</li></ul><h4 id="异步事件的惊群现象"><a href="#异步事件的惊群现象" class="headerlink" title="异步事件的惊群现象"></a>异步事件的惊群现象</h4><h2 id="四、通过I-x2F-O事件处理库来实现高性能网络服务器"><a href="#四、通过I-x2F-O事件处理库来实现高性能网络服务器" class="headerlink" title="四、通过I/O事件处理库来实现高性能网络服务器"></a>四、通过I/O事件处理库来实现高性能网络服务器</h2><h4 id="libevent"><a href="#libevent" class="headerlink" title="libevent"></a>libevent</h4><h4 id="libevent重要函数"><a href="#libevent重要函数" class="headerlink" title="libevent重要函数"></a>libevent重要函数</h4><ul><li>event_base_new 创建epoll实例 初始化</li><li>event_base_dispatch 相当于epoll_wait</li><li>event_new event_add event_del event_free</li><li>evconnlistener_new_bind</li></ul><h4 id="libevent编译与安装"><a href="#libevent编译与安装" class="headerlink" title="libevent编译与安装"></a>libevent编译与安装</h4><ul><li><a href="http://libevent.org/">http://libevent.org/</a></li><li>wget -c addr –no-check-certificate</li><li>./configure –prefix=/usr/local/libevent</li><li>make &amp;&amp; sudo make install</li><li>设置环境变量</li></ul><pre class="line-numbers language-none"><code class="language-none">unset PKG_CONFIT_LIBexport PKG_CONFIG_PATH=/usr/local/libevent/lib/pkgconfig:$PKG_CONFIG_PATHexport LD_LIBRARY_PATH=/usr/local/libevent/lib:$LD_LIBRARY_PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2022/07/05/yi-bu-io-shi-jian-chu-li/image-20220610210036660.png" class="" title="image-20220610210036660"><h4 id="buferevent的作用"><a href="#buferevent的作用" class="headerlink" title="buferevent的作用"></a>buferevent的作用</h4><ul><li>从外面看，它就是一个缓冲区，可以与socket绑定</li><li>内部由输入和输出缓冲区组成</li><li>每一个socket对应一个bufferevent</li><li>当socket有事件触发时，可以设置回调函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> 音视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音视频 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>直播平台技术原理</title>
      <link href="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/"/>
      <url>/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="直播平台技术原理"><a href="#直播平台技术原理" class="headerlink" title="直播平台技术原理"></a>直播平台技术原理</h1><h2 id="直播相关基础知识"><a href="#直播相关基础知识" class="headerlink" title="直播相关基础知识"></a>直播相关基础知识</h2><h3 id="图片原始采样数据–RGB"><a href="#图片原始采样数据–RGB" class="headerlink" title="图片原始采样数据–RGB"></a>图片原始采样数据–RGB</h3><p>RGB格式：每一个数据单元表示RGB三原色，用各原色其所占位数来表示</p><p>RGB888(24位色)</p><p>RGB565(16位色)</p><p>为什么RGB565要多留一位给绿色G？</p><p>人眼大约有1.2亿个视杆细胞和600万个视锥细胞。视杆细胞感知光度，视锥细胞有三种，分别对不同波长的光敏感（蓝绿红）。</p><p>视杆细胞对绿色波段最为敏感。人眼对光度的敏感度远大于颜色。</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024193326848.png" class="" title="image-20211024193326848"><h3 id="亮度、色度模型数据–YUV"><a href="#亮度、色度模型数据–YUV" class="headerlink" title="亮度、色度模型数据–YUV"></a>亮度、色度模型数据–YUV</h3><p>YUV颜色空间是从RGB颜色空间推导而来。</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024193427601.png" class="" title="image-20211024193427601"><p>YUV3种采样模式：444，422，420。数字表示Y、U、V三个分量的采样比。</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024193529635.png" class="" title="image-20211024193529635"><p>YUV420比RGB888节约四分之三的空间</p><h3 id="为什么需要视频编解码？"><a href="#为什么需要视频编解码？" class="headerlink" title="为什么需要视频编解码？"></a>为什么需要视频编解码？</h3><p>不考虑音频的情况下，一段1小时1080P的纯视频未编码原始数据(RGB888)大小为500G.</p><h3 id="如何进行编码？"><a href="#如何进行编码？" class="headerlink" title="如何进行编码？"></a>如何进行编码？</h3><p>视频冗余信息</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024194005467.png" class="" title="image-20211024194005467"><p>冗余信息分析–分组、分块</p><h3 id="视频帧的类型"><a href="#视频帧的类型" class="headerlink" title="视频帧的类型"></a>视频帧的类型</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024194824732.png" class="" title="image-20211024194824732"><p>B帧不适合用于直播场景。因为没有下一帧信息。</p><h3 id="帧的编码方式"><a href="#帧的编码方式" class="headerlink" title="帧的编码方式"></a>帧的编码方式</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024195154446.png" class="" title="image-20211024195154446"><p>对I帧的处理，是采用<strong>帧内编码方式</strong>，只利用本帧图像内的空间相关性。</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024195347314.png" class="" title="image-20211024195347314"><p>对P帧的处理，采用<strong>帧间编码</strong>（运动估计和补偿），同时利用空间和时间上的相关性。</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024195446313.png" class="" title="image-20211024195446313"><h3 id="量化"><a href="#量化" class="headerlink" title="量化"></a>量化</h3><p>通过用更粗糙的数据表示精细的数据来降低编码的数据量，或者通过去除人眼不敏感的信息来降低编码数据量。</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024195857629.png" class="" title="image-20211024195857629"><h3 id="编码过程"><a href="#编码过程" class="headerlink" title="编码过程"></a>编码过程</h3><p>1.每一帧原始采样分块</p><p>2.图片分组</p><p>​有差别的像素只有10%以内的点，亮度差值变化不超过2%，而色度差值变化只有1%以内</p><p>​一组称为一个GOP（包括一份I帧和多份P/B帧）</p><p>3.逐帧编码</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024200233108.png" class="" title="image-20211024200233108"><h3 id="封装格式"><a href="#封装格式" class="headerlink" title="封装格式"></a>封装格式</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024200824876.png" class="" title="image-20211024200824876"><h3 id="网络传输协议"><a href="#网络传输协议" class="headerlink" title="网络传输协议"></a>网络传输协议</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024201249972.png" class="" title="image-20211024201249972"><h3 id="整体回顾"><a href="#整体回顾" class="headerlink" title="整体回顾"></a>整体回顾</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024201648477.png" class="" title="image-20211024201648477"><h2 id="如何搭建一套直播系统"><a href="#如何搭建一套直播系统" class="headerlink" title="如何搭建一套直播系统"></a>如何搭建一套直播系统</h2><h3 id="基础直播系统结构"><a href="#基础直播系统结构" class="headerlink" title="基础直播系统结构"></a>基础直播系统结构</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024202202871.png" class="" title="image-20211024202202871"><h3 id="客户端推流处理过程"><a href="#客户端推流处理过程" class="headerlink" title="客户端推流处理过程"></a>客户端推流处理过程</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024202246829.png" class="" title="image-20211024202246829"><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024202258180.png" class="" title="image-20211024202258180"><p>软编码：使用CPU进行编码，通过软件代码来实现音视频编解码算法，如FFMpeg,GPUImage等。</p><p>硬编码：使用非CPU的硬件芯片或电路实现编码算法，通过调用编解码芯片提供的API来实现，如安卓的MediaCodec等。</p><p>现在的智能手机的“芯片”从严格意义上说其实已经不是单纯一个CPU，而是SoC，由CPU，GPU，DSP等芯片集成在一起。</p><h3 id="RTMP协议推流过程–握手"><a href="#RTMP协议推流过程–握手" class="headerlink" title="RTMP协议推流过程–握手"></a>RTMP协议推流过程–握手</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024203037221.png" class="" title="image-20211024203037221"><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024203043508.png" class="" title="image-20211024203043508"><h3 id="RTMP协议推流过程–推流"><a href="#RTMP协议推流过程–推流" class="headerlink" title="RTMP协议推流过程–推流"></a>RTMP协议推流过程–推流</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024203241492.png" class="" title="image-20211024203241492"><h3 id="RTMP协议报文格式"><a href="#RTMP协议报文格式" class="headerlink" title="RTMP协议报文格式"></a>RTMP协议报文格式</h3><p>RTMP协议中一块有完整意义的单位是“消息”，但一段“消息”在网上传输时被拆分成“消息块(Chunk)”，每块一般固定128字节(不含分块头)，最后一块(同一段报文的)可以小于128字节。</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024203539974.png" class="" title="image-20211024203539974"><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024203549408.png" class="" title="image-20211024203549408"><h3 id="服务端处理过程"><a href="#服务端处理过程" class="headerlink" title="服务端处理过程"></a>服务端处理过程</h3><p>基础流媒体服务器主要包含几个功能：信令处理；视频流处理(转码、转封装、接&amp;拉流)；视频文件存储</p><p>流媒体服务器有大量成熟解决方案（开源、商业化）：如 SRS\NGINX\CRTMPD\AMS\WOWZA等</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024204519607.png" class="" title="image-20211024204519607"><h3 id="整体开源解决方案"><a href="#整体开源解决方案" class="headerlink" title="整体开源解决方案"></a>整体开源解决方案</h3><p>基于OBS （PC强大的采集工具）+ SRS（开源流媒体服务器）可以快速搭建一套直播模型。</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024205130563.png" class="" title="image-20211024205130563"><h2 id="从原型到千万DAU的直播平台"><a href="#从原型到千万DAU的直播平台" class="headerlink" title="从原型到千万DAU的直播平台"></a>从原型到千万DAU的直播平台</h2><h3 id="直播平台基础架构图"><a href="#直播平台基础架构图" class="headerlink" title="直播平台基础架构图"></a>直播平台基础架构图</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024205352095.png" class="" title="image-20211024205352095"><h3 id="流媒体服务器集群"><a href="#流媒体服务器集群" class="headerlink" title="流媒体服务器集群"></a>流媒体服务器集群</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024205542614.png" class="" title="image-20211024205542614"><h3 id="业务服务框架-TAF"><a href="#业务服务框架-TAF" class="headerlink" title="业务服务框架-TAF"></a>业务服务框架-TAF</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024205916508.png" class="" title="image-20211024205916508"><p>IDL:接口定义语言JCE</p><p>RPC:同步、异步、单向</p><p>高性能：负载均衡算法、过载保护、熔断等</p><p>可伸缩：支持水平扩容</p><p>服务治理：部署、发布、扩/缩容、测试、配置中心、监控等</p><h3 id="其他需要具备的能力"><a href="#其他需要具备的能力" class="headerlink" title="其他需要具备的能力"></a>其他需要具备的能力</h3><p>日志处理</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024210436277.png" class="" title="image-20211024210436277"><p>链接通道</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024210452900.png" class="" title="image-20211024210452900">]]></content>
      
      
      <categories>
          
          <category> 音视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次创建自己的博客</title>
      <link href="/2022/07/05/di-yi-ci-chuang-jian-zi-ji-de-bo-ke/"/>
      <url>/2022/07/05/di-yi-ci-chuang-jian-zi-ji-de-bo-ke/</url>
      
        <content type="html"><![CDATA[<hr><p>​今天使用Hexo在GitHub上搭建了自己的博客，忙活了大半天，各种下插件，调参数，弄完之后自我感觉效果还可以，虽然大部分是直接用的大佬的模板。</p><p>​后面我会陆续将之前做的一些笔记归纳上传到这个博客中，并记录自己在学习和生活中遇到的困难和得到的收获。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
