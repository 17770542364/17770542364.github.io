<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++操作Redis实现消息队列</title>
      <link href="/2022/07/18/c-cao-zuo-redis-shi-xian-xiao-xi-dui-lie/"/>
      <url>/2022/07/18/c-cao-zuo-redis-shi-xian-xiao-xi-dui-lie/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装hiredis-h接口"><a href="#1-安装hiredis-h接口" class="headerlink" title="1.安装hiredis.h接口"></a>1.<strong>安装hiredis.h接口</strong></h2><p>C++来操作redis数据库，是通过<strong>hiredis.h接口</strong>来实现，目前只能在Linux环境使用。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/redis/hiredis<span class="token function">tar</span> -zxvf hiredis.tar.gz<span class="token function">ls</span><span class="token function">make</span> <span class="token comment"># make install 命令默认会将libhiredis.so放到/usr/local/lib/，把hiredis.h放到/usr/local/inlcude/hiredis/</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-redis常用接口"><a href="#2-redis常用接口" class="headerlink" title="2.redis常用接口"></a>2.redis常用接口</h2><h3 id="2-1-连接数据库"><a href="#2-1-连接数据库" class="headerlink" title="2.1.连接数据库"></a>2.1.连接数据库</h3><pre class="line-numbers language-none"><code class="language-none">redisContext* redisConnect(const char *ip, int port);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  该函数用来连接redis数据库， 两个参数分别是redis数据库的ip和端口，端口号一般为6379,返回值是操作数据库的句柄。类似的还提供了一个函数，供连接超时限定，即</p><pre class="line-numbers language-none"><code class="language-none">redisContext* redisConnectWithTimeout(const char *ip, int port, timeval tv)。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2释放数据库连接"><a href="#2-2释放数据库连接" class="headerlink" title="2.2释放数据库连接"></a>2.2释放数据库连接</h3><pre class="line-numbers language-none"><code class="language-none">void redisFree(redisContext *c)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>释放redisConnect()所产生的连接。</p><h3 id="2-3-操作数据库"><a href="#2-3-操作数据库" class="headerlink" title="2.3.操作数据库"></a>2.3.操作数据库</h3><pre class="line-numbers language-none"><code class="language-none">void *redisCommand(redisContext *c, const char *format...)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  该函数用于执行redis数据库中的命令，第一个参数为连接数据库返回的redisContext，剩下的参数为变参，如同C语言中的prinf()函数。此函数的返回值为void*，是返回命令的结果，但是一般会强制转换为redisReply类型，以便做进一步的处理。</p><pre class="line-numbers language-none"><code class="language-none">void freeReplyObject(void *reply);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 释放redisCommand执行后返回的的redisReply所占用的内存</p><h2 id="3-Redis消息队列"><a href="#3-Redis消息队列" class="headerlink" title="3.Redis消息队列"></a>3.Redis消息队列</h2><p>在 Redis 5.0 之后新增了 Stream 类型，它提供了丰富的消息队列操作命令：</p><ul><li><p><strong>XADD</strong>：插入消息，<strong>保证 MQ 有序</strong>，可以自动生成全局唯一 ID</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># mqstream 为消息队列，消息的键是 repo 值为5# * 表示自动生成一个全局唯一IDXADD mqstream * repo 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>XREAD</strong>：用于读取消息，可以按 ID 读取数据，保证<strong>MQ对重复消息的处理</strong>；</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 从 1599203861727-0 起读取后续的所有消息XREAD BLOCK 100 STREAMS mqstream 1599203861727-0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>XREAD</code> 后的block 配置项，类似于 <code>brpop</code> 命令的阻塞读取操作，后面的 100 的单位是毫秒，表示如果没有消息到来，<code>XREAD</code> 将阻塞 100 毫秒。</p></li><li><p><strong>XREADGROUP</strong>：按消费组形式读取消息；</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 创建名为 group1 的消费组,其消费队列是 mqstreamXGROUP create mqstream group1 0# 让 group1 消费组里的消费者 consumer1 从 mqstream 中读取所有消息# 命令最后的参数 "&gt;" 表示从第一条尚未被消费的消息开始读取XREADGROUP group group1 consumer1 streams mqstream &gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用消费组的目的是让组内的多个消费者共同分担读取消息，通常会让每个消费者读取部分消息，从而实现消息读取负载在多个消费者间是均衡分布的。</strong></p></li><li><p><strong>XPENDING 和 XACK</strong>：XPENDING 命令可以用来查询每个消费组内所有消费者已读取但尚未确认的消息（保证消费者在发生故障或宕机再次重启后，仍然可以读取未处理完的消息），而 XACK 命令用于向消息队列确认消息处理已完成。</p></li></ul><h2 id="4-遇见的问题"><a href="#4-遇见的问题" class="headerlink" title="4.遇见的问题"></a>4.遇见的问题</h2><p>安装了hiredis之后，可以编译通过，但是执行的时候，却出现了下面的错误。</p><blockquote><p>./main: error while loading shared libraries: libhiredis.so.1.0.3-dev: cannot open shared object file: No such file or directory</p></blockquote><p>编译器只会使用/lib和/usr/lib这两个目录下的库文件，通常通过源码包进行安装时，如果不指定–prefix，会将库安装在/usr/local/lib目录下；当运行程序需要链接动态库时，提示找不到相关的.so库，会报错。也就是说，/usr/local/lib目录不在系统默认的库搜索目录中，需要将目录加进去。</p><p>1、首先打开/etc/ld.so.conf文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/ld.so.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、加入动态库文件所在的目录：执行vi /etc/ld.so.conf，在”include ld.so.conf.d/*.conf”下方增加”/usr/local/lib”。</p><img src="/2022/07/18/c-cao-zuo-redis-shi-xian-xiao-xi-dui-lie/image-20220718154443921.png" class="" title="image-20220718154443921"><ol start="3"><li>运行一下ldconfig，使所有的库文件都被缓存到文件/etc/ld.so.cache中，如果没做，可能会找不到刚安装的库。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ldconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一定要执行ldconfig。否则可能目录下已经有.so文件也可能会报找不到的错误。</p><p>再次执行，正常运行。</p><img src="/2022/07/18/c-cao-zuo-redis-shi-xian-xiao-xi-dui-lie/image-20220718154522645.png" class="" title="image-20220718154522645">]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于vscode和CMake实现C/C++开发</title>
      <link href="/2022/07/16/ji-yu-vscode-he-cmake-shi-xian-c-c-kai-fa/"/>
      <url>/2022/07/16/ji-yu-vscode-he-cmake-shi-xian-c-c-kai-fa/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="一、Linux系统"><a href="#一、Linux系统" class="headerlink" title="一、Linux系统"></a>一、Linux系统</h1><p>linux是开源的操作系统</p><p>属于：多用户、多任务</p><p>Linux一切皆文件</p><h2 id="1-1目录结构"><a href="#1-1目录结构" class="headerlink" title="1.1目录结构"></a>1.1目录结构</h2><img src="/2022/07/16/ji-yu-vscode-he-cmake-shi-xian-c-c-kai-fa/image-20220717000159895.png" class="" title="image-20220717000159895"><ul><li>bin：全称binary，含义是二进制。该目录中存储的都是一些二进制文件，文件都是可以被运行的。</li><li>dev：该目录中主要存放的是外接设备，如盘、其他的光盘等。在其中的外接设备是不能直接被使用的，需要挂载（类似windows下的分配盘符）。</li><li>etc：该目录主要存储一些配置文件</li><li>home：表示<strong>除了root用户以外</strong>其他用户的家目录，类似于windows下的User/用户目录。</li><li>proc：全称process，表示进程，该目录中存储的是Linux运行时候的进程。</li><li>root：root用户自己的家目录</li><li>sbin：全称super binary，该目录也是存储一些可以被执行的二进制文件，但是必须得有super权限的用户才能执行。</li><li>tmp：表示“临时的”，当系统运行时候产生的临时文件会在这个目录中。</li><li>usr：存放的是用户自己安装的软件，类似windows下的program files。</li><li>var：存放的程序/系统的日志文件的目录。</li><li>mnt：当外接设备需要挂载的时候，就需要挂载到mnt目录下。</li></ul><h2 id="1-2指令与选项"><a href="#1-2指令与选项" class="headerlink" title="1.2指令与选项"></a>1.2指令与选项</h2><p>指令含义：linux的指令是指在Linux终端（命令行）中输入的内容。</p><p>指令格式：</p><ul><li>完整指令的<strong>标准格式</strong>：<strong>命令</strong>（空格）[<strong>选项</strong>]（空格）[<strong>操作对象</strong>]</li><li>选项和操作对象都可以没有，也可以是多个</li></ul><pre class="line-numbers language-none"><code class="language-none"># 指令示例：以下两条指令等价ls -l -a -h /home ./ls -lah /home ./<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="1-3重要指令讲解"><a href="#1-3重要指令讲解" class="headerlink" title="1.3重要指令讲解"></a>1.3重要指令讲解</h2><ul><li><p><u>pwd</u> - Print current working directory</p><ul><li>作用：打印当前终端所在的目录</li><li>用法： <strong>pwd</strong></li></ul></li><li><p><u>ls</u> - List directory contents</p><ul><li><p>作用：列出当前工作目录下的所有文件/文件夹的名称</p></li><li><p>用法1：<strong>ls</strong></p><p>含义：列出当前工作目录下的文件/文件夹的名称</p></li><li><p>用法2：<strong>ls [路径]</strong></p><p>含义：列出指定路径下的文件/文件夹名称</p><ul><li>绝对路径：相对<strong>根目录</strong>的路径</li><li>相对路径：相对<strong>当前目录</strong>的路径</li></ul></li><li><p>用法3：ls [选项] [路径]</p><p>含义：列出指定路径下的文件/文件夹名称，并以指定的格式进行显示</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ls 选项 路径</span><span class="token function">ls</span> -lah /home<span class="token comment"># 选项解释：</span>-l <span class="token builtin class-name">:</span> 表示list，以详细列表的形式进行展示-a <span class="token builtin class-name">:</span> 表示all，显示所有的文件/文件夹<span class="token punctuation">(</span>包含了隐藏文件/文件夹<span class="token punctuation">)</span>-h <span class="token builtin class-name">:</span> 以可读性较高的形式显示<span class="token comment"># 在Linux中隐藏文件一般都是以"."开头</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><u>cd</u> - change directory</p><ul><li>作用：切换当前的工作目录</li><li>用法：cd [路径]</li></ul></li><li><p><u>mkdir</u> - make directories</p><ul><li><p>作用：创建目录</p></li><li><p>用法：makir [选项] 路径</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在当前路径下创建出目录"myfolder"</span><span class="token function">mkdir</span> myfolder<span class="token comment"># 创建多层不存在的目录</span><span class="token function">mkdir</span> -p ~/a/b/c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>touch - change file timestamps</p><ul><li><p>作用：创建新文件</p></li><li><p>用法：touch 路径</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在当前目录下创建linux.txt文件</span><span class="token function">touch</span> linux.txt<span class="token comment"># 在上级目录下创建linux文件</span><span class="token function">touch</span> <span class="token punctuation">..</span>/linux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>为什么创建新文件是touch】</p><ol><li>touch的作用本来不是创建文件，而是将指定文件的修改时间设置为当前时间。就是假 装“碰”（touch）了一下这个文件，假装文件被“修改”了，于是文件的修改时间就是被设置为当前 时间。</li><li>这带来了一个副作用，就是当touch一个不存在的文件的时候，它会创建这个文件。然后， 由于touch已经可以完成创建文件的功能了，就不再需要一个单独的create了。</li></ol></blockquote></li></ul></li><li><p><u>rm</u> - remove files or directories</p><ul><li><p>作用：删除文件/文件夹</p></li><li><p>用法：rm [选项] 需要移除的文件/文件夹路径</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除当前路径下的myfile文件</span><span class="token function">rm</span> myfile<span class="token comment"># 删除当前路径下的abc文件夹</span><span class="token function">rm</span> -rf myfolder-r 删除文件夹-f 无需确认<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p><u>cp</u> - copy files and directories</p><ul><li><p>作用：复制文件/文件夹到指定的位置</p></li><li><p>用法：cp [选项] [被复制的文件/文件夹路径] [文件/文件夹被复制到的路径]</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 复制文件</span><span class="token function">cp</span> /home/zeng/myfile ./<span class="token comment"># 复制文件夹到根目录</span><span class="token function">cp</span> -r /home/zeng/myfolder /-r 表示递归复制，复制文件夹的时候需要加 -r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><u>mv</u> - move(rename) files</p><ul><li><p>作用：移动文件到新的位置，或者重命名文件</p></li><li><p>用法：mv [需要移动的文件路径] [需要保存的位置路径]</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 移动当前目录下的myfile 文件到根目录下</span><span class="token function">mv</span> myfile /myfile<span class="token comment"># 移动当前目录下的myfile到根目录下，并重命名为myfile01</span><span class="token function">mv</span> myfile /myfile01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="1-4文件编辑"><a href="#1-4文件编辑" class="headerlink" title="1.4文件编辑"></a>1.4文件编辑</h2><ul><li>vim [file]<ul><li>所有的Linux系统都会内置Vi/Vim编辑器</li><li>Vim具有程序开发的能力，也可以用来对文件进行简单的编辑</li></ul></li></ul><img src="/2022/07/16/ji-yu-vscode-he-cmake-shi-xian-c-c-kai-fa/vi-vim-cheat-sheet-sch-16580230294782.gif" class="" title="vi-vim-cheat-sheet-sch"><ul><li>gedit [file]<ul><li>Linux下的一个纯文本编辑器</li><li>可以根据不同的语言高亮显示关键字和标识符</li></ul></li><li>nano [file]<ul><li>是一个小巧的文本编辑器</li></ul></li></ul><h1 id="二、开发环境搭建"><a href="#二、开发环境搭建" class="headerlink" title="二、开发环境搭建"></a>二、开发环境搭建</h1><h2 id="2-1编译器，调试器安装"><a href="#2-1编译器，调试器安装" class="headerlink" title="2.1编译器，调试器安装"></a>2.1编译器，调试器安装</h2><ul><li><p>安装GCC，GDB</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token comment"># 以下命令安装编译器和调试器</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> build-essential gdb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>安装成功确认</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 以下命令确认每个软件是否安装成功</span><span class="token comment"># 如果成功，则显示版本号</span>gcc --versiong++ --versiongdb --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-2CMake安装"><a href="#2-2CMake安装" class="headerlink" title="2.2CMake安装"></a>2.2CMake安装</h2><ul><li><p>安装CMake</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 通过以下命令安装CMake</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> cmake<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>安装成功确认</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 以下命令确认每个软件是否安装成功</span><span class="token comment"># 如果成功，则显示版本号</span>cmake --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2022/07/16/ji-yu-vscode-he-cmake-shi-xian-c-c-kai-fa/image-20220717100104718.png" class="" title="image-20220717100104718"></li></ul><h1 id="三、GCC编译器"><a href="#三、GCC编译器" class="headerlink" title="三、GCC编译器"></a>三、GCC编译器</h1><p>VSCode是通过调用GCC编译器来实现C/C++的编译工作的</p><p>LInux开发C/C++一定要熟悉GCC</p><h2 id="3-1编译过程"><a href="#3-1编译过程" class="headerlink" title="3.1编译过程"></a>3.1编译过程</h2><ol><li><p><strong>预处理 - Pre-Processing</strong>生成.i文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -E 编译选项指示编译器仅对输入文件进行预处理</span>g++ -E test.cpp -o test.i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>编译 - Compiling</strong>  生成.s文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -S 编译选项告诉g++在为C++文件生成汇编文件后停止编译</span><span class="token comment"># g++产生的汇编语言文件的缺省扩展名是 .s</span>g++ -S test.i -o test.s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>汇编 - Assembling</strong> 生成.o文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -C 编译选项告诉g++仅把汇编文件编译为机器语言的目标代码</span><span class="token comment"># g++产生的目标代码文件的缺省扩展名是 .o</span>g++ -C test.s -o test.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>链接 - Linking</strong> 生成bin文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -o 编译选项为将产生的可执行文件指定文件名</span>g++ test.o -o <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="3-2g-重要编译参数"><a href="#3-2g-重要编译参数" class="headerlink" title="3.2g++重要编译参数"></a>3.2g++重要编译参数</h2><ul><li><p><strong>-g</strong> 编译带调试信息的可执行文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -g 告诉gcc产生能被GNU调试器GDB使用的调试信息，以调试程序</span><span class="token comment"># 产生带调试信息的可执行文件test</span>g++ -g test.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>-O[n]</strong> 优化源代码</p><blockquote><p>所谓优化，例如省略掉代码中从未使用过的变量、直接将常量表达式用结果值代替等等，这些操作 会缩减目标文件所包含的代码量，提高最终生成的可执行文件的运行效率。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -O 选项告诉 g++ 对源代码进行基本优化。这些优化在大多数情况下都会使程序执行的更快。 -O2 选项告诉 g++ 产生尽可能小和尽可能快的代码。 如-O2，-O3，-On（n 常为0–3）</span><span class="token comment"># -O 同时减小代码的长度和执行时间，其效果等价于-O1 </span><span class="token comment"># -O0 表示不做优化 </span><span class="token comment"># -O1 为默认优化 </span><span class="token comment"># -O2 除了完成-O1的优化之外，还进行一些额外的调整工作，如指令调整等。 </span><span class="token comment"># -O3 则包括循环展开和其他一些与处理特性相关的优化工作。</span><span class="token comment"># 选项将使编译的速度比使用 -O 时慢， 但通常产生的代码执行速度会更快。</span><span class="token comment"># 使用 -O2优化源代码，并输出可执行文件</span>g++ -O2 test.cpp -o <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>-l</strong> 指定库文件 | <strong>-L</strong> 指定库文件路径</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -l参数(小写)就是用来指定程序要链接的库，-l参数紧接着就是库名</span><span class="token comment"># 在/lib, /usr/lib和/usr/local/lib里面的库直接用-l参数就能链接</span><span class="token comment"># 链接glog库</span>g++ -lglog test.cpp<span class="token comment"># 如果库文件没有放在上面三目录里，需要使用-L参数(大写)指定库文件所在目录</span><span class="token comment"># -L参数跟着的是库文件所在的目录名</span><span class="token comment"># 链接mytest库，libmytest.so在/home/zeng/mytestlibfolder目录下</span>g++ -L/home/zeng/mytestlibfolder -lmytest test.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>-I</strong> 指定头文件的搜索目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -I</span><span class="token comment"># /usr/include目录一般是不用指定的，gcc知道去哪里找，但是如果头文件不在/usr/include中，我们就要用-I参数进行指定。比如头文件放在/myinclude目录中，那么编译命令就要加上-I/myinclude 参数，如果不加就会得到一个"xxx.h: No such file or directory"的错误。-I参数可以用相对路径。</span>g++ -I/myinclude test.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>-Wall</strong> 打印警告信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 打印出gcc提供的警告信息</span>g++ -Wall test.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>-w</strong> 关闭警告信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 关闭所有警告信息</span>g++ -w test.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>-std=c++11</strong>  设置编译标准</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用C++11编译标准</span>g++ -std<span class="token operator">=</span>c++11 test.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>-o</strong>  指定输出的文件名 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 指定输出的文件名</span>g++ test.cpp -o <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>-D</strong> 定义宏</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在使用gcc/g++编译的时候定义宏</span><span class="token comment"># 常用场景：</span><span class="token comment"># -DDEBUG 定义DEBUG宏，可能在文件中有DEBUG宏部分的相关信息，通过是否定义DEBUG宏来选择开启或者关闭DEBUG</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// -Dname 定义宏name,默认定义内容为字符串“1” #include &lt;stdio.h&gt;int main() {#ifdef DEBUG printf("DEBUG LOG\n");#endif printf("in\n"); }// 1. 在编译的时候，使用gcc -DDEBUG main.cpp // 2. 第七行代码可以被执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-3g-命令行编译实战"><a href="#3-3g-命令行编译实战" class="headerlink" title="3.3g++命令行编译实战"></a>3.3g++命令行编译实战</h2>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 最初目录结构 .</span>├── include│ └── Swap.h ├── main.cpp └── src└── Swap.cpp<span class="token number">2</span> directories, <span class="token number">3</span> files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-1直接编译"><a href="#3-3-1直接编译" class="headerlink" title="3.3.1直接编译"></a>3.3.1直接编译</h3>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将 main.cpp src/Swap.cpp 编译为可执行文件 附带一堆参数</span>g++ main.cpp src/Swap.cpp -Iinclude -std<span class="token operator">=</span>c++11 -O2 -Wall -o b.out<span class="token comment"># 运行 b.out ./b.out</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-3-2生成库文件并编译"><a href="#3-3-2生成库文件并编译" class="headerlink" title="3.3.2生成库文件并编译"></a>3.3.2生成库文件并编译</h3><p>  （1）链接静态库生成可执行文件1</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 进入src目录下</span><span class="token builtin class-name">cd</span> src<span class="token comment">## 汇编，生成Swap.o文件</span>g++ Swap.cpp -c -I<span class="token punctuation">..</span>/include <span class="token comment"># 生成静态库libSwap.a</span>ar rs libSwap.a Swap.o<span class="token comment">## 回到上级目录</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span class="token comment">## 链接，生成可执行文件 staticmain</span>g++ main.cpp -Iinclude -Lsrc -lSwap -o staticmain<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  （2）链接动态库生成可执行文件2</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 进入src目录下</span><span class="token builtin class-name">cd</span> src<span class="token comment">## 生成动态库libSwap.so</span>g++ Swap.cpp -I<span class="token punctuation">..</span>/include -fPIC -shared -o libSwap.so<span class="token comment">## 上面的命令等同于下面两条命令</span><span class="token comment"># gcc Swap.cpp -I../include -c -fPIC</span><span class="token comment"># gcc -shared -o libSwap.so Swap.o</span><span class="token comment">## 回到上级目录</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span class="token comment">## 链接，生成可执行文件：sharemain</span>g++ main.cpp -Iinclude -Lsrc -lSwap -o shardmain<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  编译完成后的目录结构</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 最终目录结构 .</span>├── include│ └── Swap.h├── main.cpp├── sharemain├── src │ ├── libSwap.a│ ├── libSwap.so│ ├── Swap.cpp│ └── Swap.o └── staticmain<span class="token number">2</span> directories, <span class="token number">8</span> files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-3运行可执行文件"><a href="#3-3-3运行可执行文件" class="headerlink" title="3.3.3运行可执行文件"></a>3.3.3运行可执行文件</h3>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 运行可执行文件1</span>./staticmain<span class="token comment"># 运行可执行文件2 需要指定动态库所在的位置</span><span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span>src ./sharemain<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   同时存在动态库和静态库时优先链接动态库</p><h1 id="四、GDB调试器"><a href="#四、GDB调试器" class="headerlink" title="四、GDB调试器"></a>四、GDB调试器</h1><p>GDB(GNU Debugger)是一个用来调试C/C++程序的功能强大的调试器。</p><p>程序员可以使用GDB来跟踪程序中的错误，从而减少程序员的工作量</p><p>GDB主要功能：</p><ul><li>设置<strong>断点</strong>（断点可以是条件表达式）</li><li>使程序在指定的代码行上暂停执行，便于观察</li><li><strong>单步</strong>执行程序，便与调试</li><li>查看程序中变量值的变化</li><li>动态改变程序的执行环境</li><li>分析崩溃程序产生的core文件</li></ul><h2 id="4-1常用的调试命令参数"><a href="#4-1常用的调试命令参数" class="headerlink" title="4.1常用的调试命令参数"></a>4.1常用的调试命令参数</h2><p>调试开始：执行 **gdb [exefilename]**，进入gdb调试程序，其中exefilename为要调试的可执行文件名称</p><pre class="line-numbers language-none"><code class="language-none">## 以下命令的括号内为命令的简化使用，如run(r)，直接输入命令 r 就代表命令runhelp(h) # 查看命令帮助，具体命令查询在gdb中输入 help + 命令start# 单步执行，运行程序，停在第一行执行语句list(l)# 查看源代码(list-n，从第n行开始查看代码。list+ 函数名，查看具体函数)set# 设置变量的值next(n)# 单步调试（逐过程，函数直接执行） step(s)# 单步调试（逐语句，跳入自定义函数内部执行）backtrace(bt)# 查看函数的调用栈帧和层级关系frame(f)# 切换函数的栈帧info(i)# 查看函数内部局部变量的数值finish# 结束当前函数，返回到函数调用点continue(c)# 继续运行print(p)# 打印值及地址 quit(q)# 退出gdbbreak+num(b)# 在第num行设置断点info breakpoints# 查看当前设置的所有断点delete breakpoints num(d)# 删除第num个断点display# 追踪观察具体变量值undisplay# 取消追踪观察变量watch# 被设置观察点的变量发生修改时，打印显示i watch# 显示观察点enable breakpoints# 启用断点 disablebreakpoints# 禁用断点x# 查看内存x/20xw 显示20个单元，16进制，4字节每单元run argv[1] argv[2]# 调试时命令行传参set follow-fork-mode child# Makefile项目管理：选择跟踪父子进程(fork())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>1.编译程序时需要加上 -s，之后才能用gdb进行调试</p><p>2.回车键：重复上一次命令</p></blockquote><h1 id="五、VSCode"><a href="#五、VSCode" class="headerlink" title="五、VSCode"></a>五、VSCode</h1><h2 id="VSCode高频使用快捷键"><a href="#VSCode高频使用快捷键" class="headerlink" title="VSCode高频使用快捷键"></a>VSCode高频使用快捷键</h2><p><strong>在 Ctrl+P 窗口下可以:</strong></p><ul><li>直接输入文件名，跳转到文件 ? 列出当前可执行的动作 ! 显示 Errors 或 Warnings ，也可以 Ctrl+Shift+M : 跳转到行数，也可以 Ctrl+G 直接进入 @ 跳转到 symbol （搜索变量或者函数），也可以 Ctrl+Shift+O 直接进入 @ 根据分类跳转 symbol ，查找属性或函数，也可以 Ctrl+Shift+O 后输入:进入 # 根据名字查找 symbol ，也可以 Ctrl+T</li><li>快捷键：编辑器与窗口管理</li></ul><ol><li>打开一个新窗口： Ctrl+Shift+N</li><li>关闭窗口： Ctrl+Shift+W </li><li>同时打开多个编辑器（查看多个文件） </li><li>新建文件 Ctrl+N </li><li>文件之间切换 Ctrl+Tab </li><li>切出一个新的编辑器（最多 3 个） Ctrl+\ ，也可以按住 Ctrl 鼠标点击 Explorer 里的文件名 </li><li>左中右 3 个编辑器的快捷键 Ctrl+1 Ctrl+2 Ctrl+3 </li><li>3 个编辑器之间循环切换 Ctrl+</li></ol><p> 编辑器换位置， Ctrl+k 然后按 Left 或 Right</p><h2 id="↓-代码编辑相关的快捷键-↓"><a href="#↓-代码编辑相关的快捷键-↓" class="headerlink" title="**↓ 代码编辑相关的快捷键 ↓ **"></a>**↓ 代码编辑相关的快捷键 ↓ **</h2><p><strong>快捷键：格式调整</strong></p><ol><li>代码行缩进 Ctrl+[ 、 Ctrl+] </li><li>Ctrl+C 、 Ctrl+V 复制或剪切当前行/当前选中内容 </li><li>代码格式化： Shift+Alt+F ，或 Ctrl+Shift+P 后输入 format code </li><li>上下移动一行： Alt+Up 或 Alt+Down</li><li>向上向下复制一行： Shift+Alt+Up 或 Shift+Alt+Down </li><li>在当前行下边插入一行 Ctrl+Enter</li></ol><p> 在当前行上方插入一行 Ctrl+Shift+Enter<br><strong>快捷键：光标相关</strong></p><ol><li>移动到行首： Home </li><li>移动到行尾： End </li><li>移动到文件结尾： Ctrl+End </li><li>移动到文件开头： Ctrl+Home </li><li>移动到定义处： F12</li><li>定义处缩略图：只看一眼而不跳转过去 Alt+F12 </li><li>移动到后半个括号： Ctrl+Shift+] </li><li>选择从光标到行尾： Shift+End </li><li>选择从行首到光标处： Shift+Home</li><li>删除光标右侧的所有字： Ctrl+Delete </li><li>扩展/缩小选取范围： Shift+Alt+Left 和 Shift+Alt+Right </li><li>多行编辑(列编辑)： Alt+Shift+鼠标左键， Ctrl+Alt+Down/Up </li><li>同时选中所有匹配： Ctrl+Shift+L </li><li>Ctrl+D 下一个匹配的也被选中 (在 sublime 中是删除当前行，后面自定义快键键中，设置与 Ctrl+Shift+K 互换了)</li><li>回退上一个光标操作： Ctrl+U</li></ol><p><strong>快捷键：重构代码</strong></p><ol><li>找到所有的引用： Shift+F12 </li><li>同时修改本文件中所有匹配的： Ctrl+F12</li><li>重命名：比如要修改一个方法名，可以选中后按 F2 ，输入新的名字，回车，会发现所有的文件都 修改了</li><li>跳转到下一个 Error 或 Warning ：当有多个错误时可以按 F8 逐个跳转</li></ol><p> 查看 diff ： 在 explorer 里选择文件右键 Set file to compare，然后需要对比的文件上右 键选择 Compare with file_name_you_chose<br><strong>快捷键：查找替换</strong></p><ol><li>查找 Ctrl+F </li><li>查找替换 Ctrl+H</li></ol><p> 整个文件夹中查找 Ctrl+Shift+F<br><strong>快捷键：显示相关</strong></p><ol><li>全屏：F11 </li><li>zoomIn/zoomOut：Ctrl +/</li><li>侧边栏显/隐：Ctrl+B </li><li>显示资源管理器 Ctrl+Shift+E </li><li>显示搜索 Ctrl+Shift+F </li><li>显示 Git Ctrl+Shift+G </li><li>显示 Debug Ctrl+Shift+D </li><li>显示 Output Ctrl+Shift+U</li></ol><h2 id="高频使用的技巧"><a href="#高频使用的技巧" class="headerlink" title="高频使用的技巧"></a>高频使用的技巧</h2><ul><li>左右分屏</li><li>固定打开的文件</li><li>格式化代码</li><li>Rename Symbol</li><li>显示minimap</li><li>侧边栏查看OUTLINE</li><li>全屏</li><li>关闭多个打开的文件</li></ul><h1 id="六、CMake"><a href="#六、CMake" class="headerlink" title="六、CMake"></a>六、CMake</h1><p>CMake是一个<strong>跨平台</strong>的安装编译工具，可以用简单的语句来描述<strong>所有平台</strong>的安装(编译过程)</p><p>CMake可以说已经成为大部分C++开源项目的标配</p><h2 id="6-1语法特性介绍"><a href="#6-1语法特性介绍" class="headerlink" title="6.1语法特性介绍"></a>6.1语法特性介绍</h2><ul><li><p><strong>基本语法格式：指令( 参数1 参数2 …)</strong></p><ul><li>参数使用<strong>括弧</strong>括起来</li><li>参数之间使用<strong>空格</strong>或<strong>分号</strong>分开</li></ul></li><li><p><strong>指令是大小写无关的，参数和变量是大小写相关的</strong></p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set</span><span class="token punctuation">(</span>HELLO hello.cpp<span class="token punctuation">)</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>hello main.cpp hello.cpp<span class="token punctuation">)</span><span class="token function">ADD_EXECUTABLE</span><span class="token punctuation">(</span>hello main.cpp <span class="token punctuation">${</span>HELLO<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>变量使用${}方式取值，但是在IF控制语句中是直接使用变量名</strong></p></li></ul><h2 id="6-2重要指令和CMake常用变量"><a href="#6-2重要指令和CMake常用变量" class="headerlink" title="6.2重要指令和CMake常用变量"></a>6.2重要指令和CMake常用变量</h2><h3 id="6-2-1重要指令"><a href="#6-2-1重要指令" class="headerlink" title="6.2.1重要指令"></a>6.2.1重要指令</h3><ul><li><p><strong>cmake_minimum_required</strong> - 指定CMake的最小版本要求</p><ul><li><p>语法： cmake_minimum_required(VERSION versionNumber [FATAL_ERROR])</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># cmake的最小版本要求为2.8.3</span><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">2.8.3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>project</strong> - 定义工程名称，并可指定工程支持的语言</p><ul><li><p>语法： project(porjectname [CXX] [C] [Java])</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># 指定工程名为HELLOWORLD</span><span class="token keyword">project</span><span class="token punctuation">(</span>HELLOWORLD<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>set</strong> -显式的定义变量</p><ul><li><p>语法： set(VAR [VALUE] [CHCHE TYPE DOCSTRING [FORCE]])</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># 定义SRC变量， 其值为main.cpp hello.cpp</span><span class="token keyword">set</span><span class="token punctuation">(</span>SRC main.cpp hello.cpp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>include_directories</strong> -向工程添加多个特定的头文件搜索路径</p><ul><li><p>语法：include_directories(dir1 dir2 …)</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># 将/usr/include/myincludefolder和./include添加到头文件搜索路径</span><span class="token keyword">include_directories</span><span class="token punctuation">(</span>/usr/include/myincludefolder ./include<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>link_directories</strong> -向工程添加多个特定的库文件搜索路径</p><ul><li><p>语法：link_directories(dir1 dir2 …)</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># 将/usr/lib/mylibfolder 和 ./lib添加到库文件搜索路径</span><span class="token keyword">link_directories</span><span class="token punctuation">(</span>/usr/lib/mylibfolder ./lib<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>add_library</strong> -生成库文件</p><ul><li><p>语法：add_library(libname [SHARED|STATIC|MODULE] [EXCLUDE_FROM_ALL] source1 source2 …)</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># 通过变量SRC生成 libhello.so共享库</span><span class="token keyword">add_library</span><span class="token punctuation">(</span>hello <span class="token namespace">SHARED</span> <span class="token punctuation">${</span>SRC<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>add_compile_options</strong> -添加编译参数</p><ul><li><p>语法：add_compile_options( … )</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># 添加编译参数 -Wall -std=c++11 -O2</span><span class="token keyword">add_compile_options</span><span class="token punctuation">(</span>-Wall -std=c++<span class="token number">11</span> -O2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>add_executable</strong> -生成可执行文件</p><ul><li><p>语法：add_executable(exename source1 source2 … )</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># 编译main.cpp生成可执行文件main</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>main main.cpp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>target_link_libraries</strong> -为target添加需要链接的共享库</p><ul><li><p>语法： target_link_libraries(target library1&lt;debug|optimized&gt; library2 …)</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># 将hello动态库文件链接到可执行文件main</span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>main hello<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>add_subdirectory</strong> -向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置</p><ul><li><p>语法：add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># 添加src子目录，src中需有一个CMakeLists.txt</span><span class="token keyword">add_subdirectory</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>aux_source_directory</strong> -发现一个目录下所有的源代码文件并将列表存储在一个变量中，这个指令临时用来自动构造源文件列表</p><ul><li><p>语法：aux_source_directory(dir VARIABLE)</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># 定义SRC变量，其值为当前目录下所有的源代码文件</span><span class="token keyword">aux_source_directory</span><span class="token punctuation">(</span>. SRC<span class="token punctuation">)</span>]<span class="token comment"># 编译SRC变量所代表的源代码文件，生成main可执行文件</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>main <span class="token punctuation">${</span>SRC<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="6-2-2CMake常用变量"><a href="#6-2-2CMake常用变量" class="headerlink" title="6.2.2CMake常用变量"></a>6.2.2CMake常用变量</h3><ul><li><p><strong>CMAKE_C_FLAGS</strong> gcc编译选项</p></li><li><p><strong>CMAKE_CXX_FLAGS</strong> g++编译选项</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># 在CMAKE_CXX_FLAGS编译选项后追加-std=c++11</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_FLAGS</span> <span class="token string">"<span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">CMAKE_CXX_FLAGS</span><span class="token punctuation">}</span></span> -std=c++11"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>CMAKE_BUILD_TYPE</strong> 编译类型(Debug, Release)</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># 设定编译类型为debug，调试时需要选择debug</span><span class="token keyword">set</span><span class="token punctuation">(</span>CMAEK_BUILD_TYPE Debug<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>CMAKE_BINARY_DIR</strong> | <strong>PROJECT_BINARY_DIR</strong> | <strong>projectname_BINARY_DIR</strong></p><blockquote><p>1.这三个变量指代的内容是一致的</p><p>2.如果是in-source build，指的就是工程顶层目录</p><p>3.如果是 out-of-source编译，指的是工程编译发生的目录</p><p>4.PROJECT_BINARY_DIR跟其他指令稍有区别，暂时可以理解为是一致的。</p></blockquote></li><li><p><strong>CMAKE_SOURCE_DIR</strong> | <strong>PORJECT_SOURCE_DIR</strong> | <strong>projectname_SOURCE_DIR</strong></p><blockquote><p>1.这三个变量指代的内容是一致的，不管采用何种编译方式，都是工程顶层目录</p><p>2.也就是在in-ource build时，跟CMAKE_BINARY_DIR等变量一致</p><p>3.PROJECT_SOURCE_DIR跟其他指令稍有区别，暂时可以理解为是一致的</p></blockquote></li><li><p><strong>CMAKE_C_COMPILER</strong>: 指定C编译器</p></li><li><p><strong>CMAKE_CXX_COMPILER</strong>: 指定C++编译器</p></li><li><p><strong>EXECUTABLE_OUTPUT_PATH</strong>: 可执行文件输出的存放路径</p></li><li><p><strong>LIBRARY_OUTPUT_PATH</strong>: 库文件输出的存放路径</p></li></ul><h2 id="6-3-CMake编译工程"><a href="#6-3-CMake编译工程" class="headerlink" title="6.3 CMake编译工程"></a>6.3 CMake编译工程</h2><p>CMkae目录结构：项目主目录存放在一个CMakeLists.txt文件</p><p>两种方式设置编译规则：</p><ol><li>包含源文件的子文件夹<strong>包含</strong>CMakeLists.txt文件，主目录的CMakeLists.txt通过add_subdirectory添加子目录即可</li><li>包含源文件的子文件夹未包含CMakeLists.txt文件，子目录编译规则体系在主目录的CMakeLists.txt中</li></ol><h3 id="6-3-1编译流程"><a href="#6-3-1编译流程" class="headerlink" title="6.3.1编译流程"></a>6.3.1编译流程</h3><p>在linux平台下使用CMake构建C/C++工程的流程如下</p><ul><li>手动编写CMakeLists.txt</li><li>执行命令cmake PATH 生成Makefile</li><li>执行命令make进行编译</li></ul><h3 id="6-4-2两种构建方式"><a href="#6-4-2两种构建方式" class="headerlink" title="6.4.2两种构建方式"></a>6.4.2两种构建方式</h3><ul><li><p>内部构建(in-source build)：不推荐使用</p><p>内部构建会在同级目录下产生一大堆中间文件，这些中间文件并不是我们最终所需要的，和工程源文件放在一起会显得杂乱无章</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment">## 内部构建</span><span class="token comment"># 在当前目录下，编译本目录的CMakeLists.txt，生成Makefile和其他文件</span>cmake .<span class="token comment"># 执行make命令，生成target</span>make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>外部编译(out-of-source build):推荐使用</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment">## 外部构建</span><span class="token comment"># 1.在当前目录下，构建build文件夹</span>mkdir build<span class="token comment"># 2.进入到build文件夹</span>cd build<span class="token comment"># 3.编译上级目录的CMakeLists.txt，生成Makefile和其他文件</span>cmake ..<span class="token comment"># 4.执行make命令，生成target</span>make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="6-4-CMake实践"><a href="#6-4-CMake实践" class="headerlink" title="6.4 CMake实践"></a>6.4 CMake实践</h2><h3 id="6-4-1最小的CMake工程"><a href="#6-4-1最小的CMake工程" class="headerlink" title="6.4.1最小的CMake工程"></a>6.4.1最小的CMake工程</h3><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># Set the minimum version of CMake that can be used </span><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token comment"># Set the project name</span><span class="token keyword">project</span> <span class="token punctuation">(</span>HELLO<span class="token punctuation">)</span><span class="token comment"># Add an executable</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>hello_cmake main.cpp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-4-2多目录工程-直接编译"><a href="#6-4-2多目录工程-直接编译" class="headerlink" title="6.4.2多目录工程 - 直接编译"></a>6.4.2多目录工程 - 直接编译</h3><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># Set the minimum version of CMake that can be used </span><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token comment">#project name </span><span class="token keyword">project</span><span class="token punctuation">(</span>SWAP<span class="token punctuation">)</span><span class="token comment">#head file path</span><span class="token keyword">include_directories</span><span class="token punctuation">(</span> include <span class="token punctuation">)</span><span class="token comment">#source directory files to var </span><span class="token keyword">add_subdirectory</span><span class="token punctuation">(</span> src DIR_SRCS <span class="token punctuation">)</span><span class="token comment">#add executable file </span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>swap_02 <span class="token punctuation">${</span>TEST_MATH<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">#add link library</span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span><span class="token punctuation">${</span>FS_BUILD_BINARY_PREFIX<span class="token punctuation">}</span>sqrt <span class="token punctuation">${</span>LIBRARIES<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-4-3多目录工程-生成库编译"><a href="#6-4-3多目录工程-生成库编译" class="headerlink" title="6.4.3多目录工程 -生成库编译"></a>6.4.3多目录工程 -生成库编译</h3><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># Set the minimum version of CMake that can be used</span><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token comment">#project name </span><span class="token keyword">project</span><span class="token punctuation">(</span>SWAP_LIBRARY<span class="token punctuation">)</span><span class="token comment">#add compile options</span><span class="token keyword">add_compile_options</span><span class="token punctuation">(</span><span class="token string">"-Wall -std=c++11"</span><span class="token punctuation">)</span><span class="token comment">#set CMAKE_BUILD_TYPE</span><span class="token keyword">set</span><span class="token punctuation">(</span> <span class="token variable">CMAKE_BUILD_TYPE</span> Debug <span class="token punctuation">)</span><span class="token comment"># set output binary path </span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">EXECUTABLE_OUTPUT_PATH</span> <span class="token punctuation">${</span><span class="token variable">PROJECT_BINARY_DIR</span><span class="token punctuation">}</span>/bin<span class="token punctuation">)</span><span class="token comment">############################################################ # Create a library</span><span class="token comment">############################################################</span><span class="token comment">#Generate the static library from the library sources </span><span class="token keyword">add_library</span><span class="token punctuation">(</span> swap_library <span class="token namespace">STATIC</span> src/Swap.cpp <span class="token punctuation">)</span> <span class="token keyword">target_include_directories</span><span class="token punctuation">(</span> swap_lib <span class="token namespace">PUBLIC</span> <span class="token punctuation">${</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">}</span>/include <span class="token punctuation">)</span><span class="token comment">############################################################ # Create an executable</span><span class="token comment">############################################################</span><span class="token comment"># Add an executable with the above sources </span><span class="token keyword">add_executable</span><span class="token punctuation">(</span> swap_01 main.cpp <span class="token punctuation">)</span><span class="token comment"># link the new swap_01 target with the swap_lib target</span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span> swap_01 swap_liby <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="七、使用VSCode进行完整的项目开发"><a href="#七、使用VSCode进行完整的项目开发" class="headerlink" title="七、使用VSCode进行完整的项目开发"></a>七、使用VSCode进行完整的项目开发</h1><p>案例：士兵突击 需求：</p><ol><li>士兵 许三多 有一把枪，叫做 AK47</li><li>士兵 可以 开火 </li><li>士兵 可以 给枪装填子弹</li><li>枪 能够 发射 子弹 </li><li>枪 能够 装填子弹 —— 增加子弹数量</li></ol><p>开发：</p><ul><li>开发枪类</li><li>开发士兵类</li></ul><img src="/2022/07/16/ji-yu-vscode-he-cmake-shi-xian-c-c-kai-fa/image-20220717202949143.png" class="" title="image-20220717202949143"><h2 id="7-1合理设置项目目录"><a href="#7-1合理设置项目目录" class="headerlink" title="7.1合理设置项目目录"></a>7.1合理设置项目目录</h2><img src="/2022/07/16/ji-yu-vscode-he-cmake-shi-xian-c-c-kai-fa/image-20220717205602567.png" class="" title="image-20220717205602567"><h2 id="7-2编写项目源文件"><a href="#7-2编写项目源文件" class="headerlink" title="7.2编写项目源文件"></a>7.2编写项目源文件</h2><p>见源代码</p><h2 id="7-3编写CMakeLists-txt构建项目编译规则"><a href="#7-3编写CMakeLists-txt构建项目编译规则" class="headerlink" title="7.3编写CMakeLists.txt构建项目编译规则"></a>7.3编写CMakeLists.txt构建项目编译规则</h2><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token keyword">project</span><span class="token punctuation">(</span>SOLIDER<span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_BUILD_TYPE</span> Debug<span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_FLAGS</span> <span class="token string">"<span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">CMAKE_CXX_FLAGS</span><span class="token punctuation">}</span></span> -O0 -Wall"</span><span class="token punctuation">)</span><span class="token keyword">include_directories</span><span class="token punctuation">(</span>include<span class="token punctuation">)</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>my_cmake_exe main.cpp src/Gun.cpp src/Solider.cpp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-4使用外部构建，手动编译CMake项目"><a href="#7-4使用外部构建，手动编译CMake项目" class="headerlink" title="7.4使用外部构建，手动编译CMake项目"></a>7.4使用外部构建，手动编译CMake项目</h2><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment">## 外部构建</span><span class="token comment"># 1.在当前目录下，构建build文件夹</span>mkdir build<span class="token comment"># 2.进入到build文件夹</span>cd build<span class="token comment"># 3.编译上级目录的CMakeLists.txt，生成Makefile和其他文件</span>cmake ..<span class="token comment"># 4.执行make命令，生成target</span>make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-5配置VScode的json文件并调试项目"><a href="#7-5配置VScode的json文件并调试项目" class="headerlink" title="7.5配置VScode的json文件并调试项目"></a>7.5配置VScode的json文件并调试项目</h2><p>生成launch.json文件</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"(gdb) 启动"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>                        <span class="token comment">// 可执行文件的位置</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${fileDirname}/build/my_cmake_exe"</span><span class="token punctuation">,</span>                        <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${fileDirname}"</span><span class="token punctuation">,</span>            <span class="token property">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"MIMode"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span>            <span class="token property">"setupCommands"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"为 gdb 启用整齐打印"</span><span class="token punctuation">,</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-enable-pretty-printing"</span><span class="token punctuation">,</span>                    <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    <span class="token property">"description"</span><span class="token operator">:</span>  <span class="token string">"将反汇编风格设置为 Intel"</span><span class="token punctuation">,</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-gdb-set disassembly-flavor intel"</span><span class="token punctuation">,</span>                    <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>                       <span class="token comment">// 配置编译任务</span>            <span class="token property">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">"Build"</span><span class="token punctuation">,</span>                        <span class="token property">"miDebuggerPath"</span><span class="token operator">:</span> <span class="token string">"/usr/bin/gdb"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置tasks.json文件，用于调试前自动编译</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${fileDirname}/build"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"cmake"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"cmake"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">".."</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"make"</span><span class="token punctuation">,</span>            <span class="token property">"group"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span>                <span class="token property">"isDefault"</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"make"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"Build"</span><span class="token punctuation">,</span>            <span class="token property">"dependsOrder"</span><span class="token operator">:</span> <span class="token string">"sequence"</span><span class="token punctuation">,</span><span class="token comment">// 按列出的顺序执行任务依赖项</span>            <span class="token property">"dependsOn"</span><span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token string">"cmake"</span><span class="token punctuation">,</span>                <span class="token string">"make"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>            <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> CMake </tag>
            
            <tag> VSCode </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用操作</title>
      <link href="/2022/07/15/git-chang-yong-cao-zuo/"/>
      <url>/2022/07/15/git-chang-yong-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><p>查看工作区状态，如果跟踪的文件有做任何修改，都可以通过该命令来发现。</p><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><p>查看具体修改内容，可以显示所有文件的所有修改内容。</p><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><p>切换分支</p><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><p>将工作区所作的修改添加到暂存区</p><p>**git add .**命令，可以将工作区所有的修改内容都添加到暂存区</p><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><p>git commit -m “备注”</p><p>将暂存区中的内容保存到本地工作区</p><p>也可以通过<code>git commit -am</code>来进行快速操作，其实它就是<code>git add . &amp; git commit -m</code>的结合体。</p><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><p>将本地文件推送到远程仓库中</p><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><p>查看远程仓库有没有更新，有更新就下载下来，如果没有更新就没有任何反应</p><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><p>合并分支</p><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>拉取远程仓库，如果远程仓库有更新，则会将更新下载下来并合并到当前分支上</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音视频基础</title>
      <link href="/2022/07/13/yin-shi-pin-ji-chu/"/>
      <url>/2022/07/13/yin-shi-pin-ji-chu/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="音视频的应用"><a href="#音视频的应用" class="headerlink" title="音视频的应用"></a>音视频的应用</h2><ul><li>互动直播系统</li><li>娱乐直播直播</li><li>音视频特效</li><li>音视频编辑</li></ul><h2 id="最简单的直播系统"><a href="#最简单的直播系统" class="headerlink" title="最简单的直播系统"></a>最简单的直播系统</h2><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><ul><li><p>ffmpeg</p><ul><li>ffmpeg -i 文件路径 -f flv rtmp://服务器地址</li></ul></li><li><p>ffplay</p></li><li><p>vlc</p></li></ul><h3 id="架构模型"><a href="#架构模型" class="headerlink" title="架构模型"></a>架构模型</h3><ul><li>流媒体服务器</li><li>推流工具</li><li>拉流工具</li></ul><img src="/2022/07/13/yin-shi-pin-ji-chu/image-20220713213551172.png" class="" title="image-20220713213551172"><h2 id="推流中断与画质不清晰的解决办法"><a href="#推流中断与画质不清晰的解决办法" class="headerlink" title="推流中断与画质不清晰的解决办法"></a>推流中断与画质不清晰的解决办法</h2><p>推流中断的原因：音频和视频播放不同步，时间戳出现错误</p><p>解决：加入参数 -re</p><p>画质不清晰的原因：播放时按照默认设置对视频重新编码，画质有所下降</p><p>解决：加入参数 -c copy</p><h2 id="编译ffmpeg与ffplay"><a href="#编译ffmpeg与ffplay" class="headerlink" title="编译ffmpeg与ffplay"></a>编译ffmpeg与ffplay</h2><h3 id="Mac-x2F-Linux环境变量"><a href="#Mac-x2F-Linux环境变量" class="headerlink" title="Mac/Linux环境变量"></a>Mac/Linux环境变量</h3><ul><li>环境变量的工作原理</li></ul><p>PATH：用于配置全局使用的命令地址</p><p>PKG_CONFIG_PATH(pkg-config): 用于找到头文件和库文件的地址</p><ul><li>环境变量的变更</li></ul><p>~/.bashrc | ~/.bash_profile</p><p>source ~/.bashrc</p><h3 id="pkg-config命令"><a href="#pkg-config命令" class="headerlink" title="pkg-config命令"></a>pkg-config命令</h3><p>pkg-config –libs –cflags libavutil</p>]]></content>
      
      
      <categories>
          
          <category> 音视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实习记录(1)sha256WithRsa签名算法(C++)</title>
      <link href="/2022/07/13/shi-xi-ji-lu-1/"/>
      <url>/2022/07/13/shi-xi-ji-lu-1/</url>
      
        <content type="html"><![CDATA[<p>今天，琴姐交给我一个任务，将一段java实现的sha256WithRsa签名算法转换成C++实现。java的实现如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">rsa256Sign</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token class-name">String</span> privateKey<span class="token punctuation">,</span><span class="token class-name">String</span> charset<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">PrivateKey</span> priKey <span class="token operator">=</span> <span class="token function">getPrivateKeyFromPKCS8</span><span class="token punctuation">(</span>KEY_ALGORITHM<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Signature</span> signature <span class="token operator">=</span> <span class="token class-name">Signature</span>                <span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>SIGN_SHA256RSA_ALGORITHMS<span class="token punctuation">)</span><span class="token punctuation">;</span>            signature<span class="token punctuation">.</span><span class="token function">initSign</span><span class="token punctuation">(</span>priKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>charset<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                signature<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                signature<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>charset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> signed <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeBase64</span><span class="token punctuation">(</span>signed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"RSAcontent = "</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">"; charset = "</span> <span class="token operator">+</span> charset<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传进来的参数分别为需要加密的字段，私钥，字符集，返回加密好的base64编码。通过调用java.security包中的一些方法可以很方便地实现。</p><p>通过在网上搜寻得知，C/C++可以使用openssl来实现各种加密解密算法，因此我便开始去了解openssl库的使用方法。在这之前，先简单回顾一下关于密码学相关的知识。</p><h3 id="密码学回顾"><a href="#密码学回顾" class="headerlink" title="密码学回顾"></a>密码学回顾</h3><h4 id="1-对称加密"><a href="#1-对称加密" class="headerlink" title="1.对称加密"></a>1.对称加密</h4><p>对称密码体制也称单钥或私钥密码体制，其加密密钥和解密密钥相同，或实质上等同， 即从一个易于推出另一个。</p><p> 优点：保密性高，加密速度快，适合加密大量数据，易于通过硬件实现；<br>缺点：秘钥必须通过安全可靠的途径传输，秘钥的分发是保证安全的关键因素；</p><h4 id="2-非对称加密"><a href="#2-非对称加密" class="headerlink" title="2.非对称加密"></a>2.非对称加密</h4><p>非对称密码体制又称双钥或公钥密码体制，其加密密钥和解密密钥不同，从一个很难推出另一个。其中的加密密钥可以公开，称为公开密钥，简称公钥；解密密钥必须保密，称为私有密钥，简称私钥。</p><p> 优点：密钥交换可通过公开信道进行，无需保密。既可用于加密也可用于签名。<br>缺点：加密速度不如对称密码，不适合大量数据加密，加密操作难以通过硬件实现</p><p>常见的非对称密码算法：RSA(基于大整数质因子分解难题)、ECC(基于椭圆曲线离散对数难题)。</p><h4 id="3-哈希函数与数字签名"><a href="#3-哈希函数与数字签名" class="headerlink" title="3.哈希函数与数字签名"></a>3.哈希函数与数字签名</h4><ul><li>哈希函数</li></ul><p>哈希函数将任意长的消息映射为一个固定长度的散列值，也称消息摘要。消息摘要可以作为认证符，完成消息认证。<br>哈希是单向函数，从消息摘要来推理原消息是极为困难的。哈希函数的安全性是由发生碰撞的概率决定的。如果攻击者能轻易构造出两个不同的消息具有相同的消息摘要，那么这样的哈希函数是不可靠的。</p><p> 常见的哈希函数有：MD5，SHA264，HMAC。</p><ul><li>数字签名</li></ul><p>数字签名是公钥密码的典型应用，可以提供和现实中亲笔签名相似的效果，在技术上和法律上都有保证。是网络环境中提供消息完整性，确认身份，保证消息来源（抗抵赖性）的重要技术。</p><p> 数字签名与验证过程：</p><p> 发送方用哈希函数从报文文本中生成一个128位的散列值（或报文摘要），发送方用自己的私钥对这个散列值进行加密来形成自己的数字签名。然后，这个数字签名将作为报文的附件和报文一起发送给接收方。接收方收到报文后，用同样的哈希函数从原始报文中计算出散列值（或报文摘要），接着再用发送方的公钥来对报文附加的数字签名进行解密得出另一个散列值，如果两个散列值相同，那么接收方就能确认该数字签名是发送方的。通过数字签名能够实现消息的完整性和不可抵赖性。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>现在我们要实现的是一个使用非对称加密算法RSA的数字签名算法，已知明文和私钥，生成一个经过RSA加密后的消息摘要，并返回base64编码。加密的步骤如下：</p><ol><li>使用SHA256算法得到一段消息摘要</li><li>使用RSA算法中的私钥对消息摘要进行加密</li><li>对加密后的密文进行base64编码</li></ol><p>加密的步骤比较简单，但是在关于C++的实现比较少，因此在写代码的过程中也遇到了不少困难。</p>]]></content>
      
      
      <categories>
          
          <category> 实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> RSA </tag>
            
            <tag> SHA264 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++常见面试题</title>
      <link href="/2022/07/12/c-chang-jian-mian-shi-ti/"/>
      <url>/2022/07/12/c-chang-jian-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++新特性(从C++11到C++20)</title>
      <link href="/2022/07/12/c-xin-te-xing-cong-c-11-dao-c-20/"/>
      <url>/2022/07/12/c-xin-te-xing-cong-c-11-dao-c-20/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记</title>
      <link href="/2022/07/12/leetcode-shua-ti-bi-ji/"/>
      <url>/2022/07/12/leetcode-shua-ti-bi-ji/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Effective C++笔记</title>
      <link href="/2022/07/12/effective-c-bi-ji/"/>
      <url>/2022/07/12/effective-c-bi-ji/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++服务器开发笔记</title>
      <link href="/2022/07/12/c-fu-wu-qi-kai-fa-bi-ji/"/>
      <url>/2022/07/12/c-fu-wu-qi-kai-fa-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="第四章-网络编程重难点解析"><a href="#第四章-网络编程重难点解析" class="headerlink" title="第四章 网络编程重难点解析"></a>第四章 网络编程重难点解析</h2><h3 id="4-1-学网络编程应该掌握的socket函数"><a href="#4-1-学网络编程应该掌握的socket函数" class="headerlink" title="4.1 学网络编程应该掌握的socket函数"></a>4.1 学网络编程应该掌握的socket函数</h3><table><thead><tr><th>函数名称</th><th>简单说明</th></tr></thead><tbody><tr><td>socket</td><td>创造某种类型的套接字</td></tr><tr><td>bind</td><td>将一个socket绑定到一个IP与端口的二元组上</td></tr><tr><td>listen</td><td>将一个socket变为监听状态</td></tr><tr><td>connect</td><td>试图建立一个TCP连接，一般用于客户端</td></tr><tr><td>accept</td><td>尝试接收一个连接，一般用于服务端</td></tr><tr><td>send</td><td>通过一个socket发送数据</td></tr><tr><td>recv</td><td>通过一个socket接受数据</td></tr><tr><td>select</td><td>判断一组socket上的读写和异常事件</td></tr><tr><td>gethostbyname</td><td>通过域名获取机器地址</td></tr><tr><td>close</td><td>关闭一个套接字，回收该socket对应的资源。windows中对应的是closesocket</td></tr><tr><td>shutdown</td><td>关闭socket收发通道</td></tr><tr><td>setsockopt</td><td>设置一个套接字选项</td></tr><tr><td>getsockopt</td><td>获取一个套接字选项</td></tr></tbody></table><h3 id="4-2-TCP网络通信的基本流程"><a href="#4-2-TCP网络通信的基本流程" class="headerlink" title="4.2 TCP网络通信的基本流程"></a>4.2 TCP网络通信的基本流程</h3><p>对于服务器：</p><ol><li>调用socket函数创建socket（监听socket）。</li><li>调用bind函数将socket绑定到某个IP和端口的二元组上</li><li>调用listen函数开启监听</li><li>当有客户端请求连接上来时，调用accept函数接收连接，产生一个新的socket（客户端socket）。</li><li>基于新产生的socket调用send或recv函数，开始与客户端进行数据交流。</li><li>通信结束后，调用close函数关闭监听socket。</li></ol><p>对于客户端：</p><ol><li>调用socket函数创建客户端socket。</li><li>调用connect函数尝试连接服务器。</li><li>连接成功后调用send或recv函数，开始与服务器进行数据交流。</li><li>通信结束后，调用close函数关闭监听socket。</li></ol><h3 id="4-3-bind函数"><a href="#4-3-bind函数" class="headerlink" title="4.3 bind函数"></a>4.3 bind函数</h3><h4 id="对bind函数如何选择绑定地址"><a href="#对bind函数如何选择绑定地址" class="headerlink" title="对bind函数如何选择绑定地址"></a>对bind函数如何选择绑定地址</h4><p>INADDR_ANY：如果应用程序不关心bind绑定的IP，则可以使用INADDR_ANY，底层的（协议栈）服务会自动选择一个合适的IP地址，这样在多个网卡机器上选择IP地址会变得简单。</p><h4 id="bind函数的端口号问题"><a href="#bind函数的端口号问题" class="headerlink" title="bind函数的端口号问题"></a>bind函数的端口号问题</h4><p>如果将bind函数中的端口号设置为0，操作系统会随机为程序分配一个可用的监听端口。</p><p>客户端程序中的socket也可以调用bind函数来绑定一个端口号。</p><h3 id="4-4-select函数的用法和原理"><a href="#4-4-select函数的用法和原理" class="headerlink" title="4.4 select函数的用法和原理"></a>4.4 select函数的用法和原理</h3><p>select函数用于检测在一组socket中是否有事件就绪。事件就绪一般分为以下三类：</p><p>1）读事件就绪</p><p>2）写事件就绪</p><p>3）异常事件就绪</p><p>函数签名如下:</p><pre class="line-numbers language-none"><code class="language-none">int select(int nfds, fd_set *readfds,fd_set *writefds, fd_set *exceptfds,struct timeval *timeout);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><p>1）nfds：Linux上的socket也叫作fd，将这个参数的值设置为所有需要使用select函数检测事件的fd中的最大值加1</p><p>2）readfds：需要监听可读事件的fd集合</p><p>3）writefds：需要监听可写事件的fd集合</p><p>4）exceptfds：需要监听异常事件的fd集合</p><p>5）timeout：超时时间，在这个参数设定的时间内检测这些fd的事件，超过这个时间后，select函数将立即返回。</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>select函数在调用前后可能会修改readfds、writefds和exceptfds这三个集合中的内容，所以如果想在下次调用select函数时复用这些fd_set变量，就要在下次调用前使用FD_ZERO将fd_set清零，然后调用FD_SET将需要检测事件的fd重新添加到fd_set中。</li><li>select函数也会修改timeval结构体的值，如果想要复用这个变量，则必须给timeval变量重新设置值。</li><li>select函数的timeval结构体的tv_set和tv_usec如果都被设置为0，即检测事件的总时间被设置为0，则其行为是select检测相关集合中的fd，如果没有需要的事件，则立即返回。</li><li>如果将select函数的timeval参数设为NULL，则select函数会一直阻塞下去，直到需要的事件触发。</li><li>在Linux中，select函数的第一个参数必须被设置为需要检测事件所有fd中的最大值加1。</li></ol><h4 id="select函数的缺点"><a href="#select函数的缺点" class="headerlink" title="select函数的缺点"></a>select函数的缺点</h4><ol><li>每次调用select函数时，都需要把fd集合从用户态复制到内核态，这个开销在fd较多时会很大，同时每次调用select函数都需要在内核中遍历传递进来的所有fd，这个开销在fd较多时也很大。</li><li>单个进程能够监视的文件描述符的数量存在最大限制，在Linux上一般为1024.可以通过先修改宏定义然后重新编译内核来调整这一限制，但是这样非常麻烦且效率低下。</li><li>select函数在每次调用之前都要对传入的参数进行重新设定，这样做比较麻烦。</li><li>在Linux上，select函数的实现原理是其底层使用了poll函数。</li></ol><p>在windows中，select函数结束后，不会修改其参数timeval的值，并且select函数的第一个参数传入任意值都可以。为了兼容跨平台代码，一般保持与Linux代码一致。</p><h3 id="4-5-socket函数的阻塞模式和非阻塞模式"><a href="#4-5-socket函数的阻塞模式和非阻塞模式" class="headerlink" title="4.5 socket函数的阻塞模式和非阻塞模式"></a>4.5 socket函数的阻塞模式和非阻塞模式</h3><p>无论是windows还是linux，默认创建的socket都是阻塞模式的。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// Linux上设置非阻塞模式的方法int oldSocketFlag = fcntl(sockfd, F_GETFL, 0);int newSocketFlag = oldSocketFlag | O_NONBLOCK;fcntl(sockfd, F_SETFL, newSocketFlag);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// windows上设置阻塞和非阻塞模式的方法u_long argp = 1;// 非阻塞模式ioctlsocket(s, FIONBIO, &amp;argp);u_long argp = 0;// 阻塞模式ioctlsocket(s, FIONBIO, &amp;argp);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-send和recv函数在阻塞和非阻塞模式下的表现"><a href="#4-6-send和recv函数在阻塞和非阻塞模式下的表现" class="headerlink" title="4.6 send和recv函数在阻塞和非阻塞模式下的表现"></a>4.6 send和recv函数在阻塞和非阻塞模式下的表现</h3><p>send函数：将应用层发送缓冲区的数据拷贝到内核缓冲区中。</p><p>recv函数：将内核缓冲区中的数据拷贝到应用程序的缓冲区中。</p><p>当发送接收双方的内核缓存区都被填满时，继续调用send函数，或者发送接收双方的内核缓存区都没有数据时，继续调用recv函数：</p><ol><li>当socket是阻塞模式时，继续调用send/recv函数，程序会阻塞在send/recv调用处</li><li>当socket是非阻塞模式时，继续调用send/recv函数，函数不会阻塞程序执行流，而是立即出错并返回，得到一个相关的错误码。</li></ol><h4 id="非阻塞模式下send和recv函数的返回值总结"><a href="#非阻塞模式下send和recv函数的返回值总结" class="headerlink" title="非阻塞模式下send和recv函数的返回值总结"></a>非阻塞模式下send和recv函数的返回值总结</h4><table><thead><tr><th>返回值n</th><th>返回值的含义</th></tr></thead><tbody><tr><td>大于0</td><td>成功发送(send)或接收(recv)n字节</td></tr><tr><td>0</td><td>对端关闭连接</td></tr><tr><td>小于0（-1）</td><td>出错、被信号中断、对端TCP窗口太小导致数据发送不出去或者当前网卡缓冲区已无数据可放</td></tr></tbody></table><h4 id="发送0字节数据的效果"><a href="#发送0字节数据的效果" class="headerlink" title="发送0字节数据的效果"></a>发送0字节数据的效果</h4><p>两种情况让send函数的返回值为0：</p><p>1.对端关闭连接时，正好尝试调用send函数发送数据。</p><p>2.本端尝试调用send函数发送0字节数据。</p><p>recv函数只有在对端关闭连接时才会返回0，对端发送0字节数据，本段的recv函数不会收到0字节数据。</p><h3 id="4-7-connect函数在阻塞和非阻塞模式下的行为"><a href="#4-7-connect函数在阻塞和非阻塞模式下的行为" class="headerlink" title="4.7 connect函数在阻塞和非阻塞模式下的行为"></a>4.7 connect函数在阻塞和非阻塞模式下的行为</h3><p>当socket使用阻塞模式时，connect函数会一直到有明确的结果才会返回。在实际项目中，一般使用异步connect技术（非阻塞connect）。步骤如下：</p><ol><li>创建socket，将socket设置为非阻塞模式。</li><li>调用connect函数，此时无论connect函数是否连接成功，都会立即返回。如果返回-1，则不一定表示连接出错，如果此时错误码是EINPROGRESS，则表示正在尝试连接。</li><li>调用select函数，在指定的时间内判断该select是否可写，如果可写，则说明连接成功，反之则认为失败。</li></ol><p><strong>注意</strong>：在Linux上，一个socket在没有建立连接之前，用select函数检测其是否可写，也会得到可写的结果。因此，在Linux上，在connect之后，不仅要调用select检测是否可写，还要调用getsockopt检测此时socket是否出错，通过错误码来检测和确定是否连接上。错误码为0时表示连接上，反之表示未连接上。</p><h3 id="4-8-连接时顺便接收第一组数据"><a href="#4-8-连接时顺便接收第一组数据" class="headerlink" title="4.8 连接时顺便接收第一组数据"></a>4.8 连接时顺便接收第一组数据</h3><p>Linux提供了TCP_DEFER_ACCEPT的socket选项，设置该选项后只有连接建立成功且收到第1组对端数据时，accept函数才会返回。</p><p>Windows中提供了扩展函数AcceptEx，用于接受连接后，可选择性地决定是否顺便收取第1组对端数据。</p><p>同时主动连接方也可以使用ConnectEx函数在发起连接时顺便发送第1组数据。</p><h3 id="4-9-获取当前socket对应的接收缓冲区中的可读数据量"><a href="#4-9-获取当前socket对应的接收缓冲区中的可读数据量" class="headerlink" title="4.9 获取当前socket对应的接收缓冲区中的可读数据量"></a>4.9 获取当前socket对应的接收缓冲区中的可读数据量</h3><p>在Windows上可以使用ioctlsocket函数，函数签名如下：</p><pre class="line-numbers language-none"><code class="language-none">int ioctlsocket(SOCKET s, long cmd, u_long* argp);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要获取对应的socket接收缓冲区中的字节数，将cmd命令设置为FIONREAD即可</p><pre class="line-numbers language-none"><code class="language-none">ulong bytesToRecv;if (ioctlsocket(clientsock, FIONREAD, &amp;bytesToRecv) == 0){// 函数调用成功后，bytesToRecv的值即为当前接收缓冲区中数据的字节数}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Linux上可以使用ioctl函数，用法与Windows上基本相同</p><pre class="line-numbers language-none"><code class="language-none">#include &lt;sys/ioctl.h&gt;int ioctl(int d, int request, ...);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><p>1.参数bytesToRecv是一个输出参数，对于大多数其他函数来说bytesToRecv可以不指定初始化值，因为函数在调用成功后会给该变量设值。但是对于Linux中的ioctl函数来说，必须将bytesToRecv初始化为0，才能在ioctl函数调用成功后得到正确的结果。windows的ioctlsocket函数则没有这个限制。</p><p>2.不要在调用recv或read函数接收数据之前，使用ioctlsocket或ioctl函数获取数据大小，再根据大小分配缓冲区。在实际的网络通信程序中，很少需要预先知道在接收缓冲区中有多少可读数据，一般根据实际的业务需求决定收取多少字节的数据。</p><h3 id="4-10-Linux-EINTR错误码"><a href="#4-10-Linux-EINTR错误码" class="headerlink" title="4.10 Linux EINTR错误码"></a>4.10 Linux EINTR错误码</h3><p>在类UNIX/Linux中调用一些socket函数时，除了在函数调用出错时会返回-1外，这些函数可能被信号中断时也会返回-1。此时可以通过错误码errno判断是不是EINTR，来确定是不是被信号中断。</p><h3 id="4-11-Linux-SIGPIPE信号"><a href="#4-11-Linux-SIGPIPE信号" class="headerlink" title="4.11 Linux SIGPIPE信号"></a>4.11 Linux SIGPIPE信号</h3><p>当A关闭连接时，若B继续向A发送数据，则根据TCP的规定，B会收到A的一个RST报文应答，若B继续向这个服务器发送数据，系统就会产生一个SIGPIPE信号给B进程，告诉它这个连接已经断开了，不要再写了。系统对SIGPIPE信号的默认处理行为是让B进程退出。</p><p>TCP通信是全双工的信道，可以看作两条单工信道，TCP连接两端的两个端点各负责一条。当对端关闭时，虽然本意是关闭整个两条信道，但本端只收到FIN包。按照TCP规定的语义，表示对端只关闭了其所负责的那一条单工信道，虽然不再发送数据，但仍然可以继续接收数据。</p><p>对一个已经收到FIN包的socket调用read/recv方法，如果接收缓冲区已空，则会返回0，也就是常说的连接关闭状态。但第一次对其调用write/send方法时，如果发送缓冲区没问题，则发送成功，但发生的报文会导致对端回应RST报文。再次尝试调用write/send函数时，则会因为产生SIGPIPE信号而导致进程退出。</p><p>为了避免这种情况，可以捕获SIGPIPE信号并对其进行处理或忽略该信号。</p><pre class="line-numbers language-none"><code class="language-none">signal(SIGPIPE, SIG_IGN);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样设置后，第2次调用write/send方法时会返回-1，同时errno错误码被设置为SIGPIPE，程序便能知道对端已经关闭。</p><h3 id="4-12-Linux-poll函数的用法"><a href="#4-12-Linux-poll函数的用法" class="headerlink" title="4.12 Linux poll函数的用法"></a>4.12 Linux poll函数的用法</h3><p>poll函数用于检测一组文件描述符上的可读可写和出错事件，其函数签名如下：</p><pre class="line-numbers language-none"><code class="language-none">#include &lt;poll.h&gt;int poll(struct pollfd* fds, nfds_t nfds, int timeout);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参数定义如下：</p><p>1）fds：指向一个结构体数组首个元素的指针，每个数组元素都是一个struct pollfd结构，用于指定检测某个给定fd的条件。</p><p>2）nfds：参数fds结构体数组的长度。</p><p>3）timeout：表示poll函数的超时时间，单位为毫秒。</p><p>struct pollfd结构体定义如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct pollfd {intfd;// 待检测事件的fdshortevents;// 关心的事件组合short revents;// 检测后得到的事件类型}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="poll与select相比的优点"><a href="#poll与select相比的优点" class="headerlink" title="poll与select相比的优点"></a>poll与select相比的优点</h4><ol><li>poll不要求计算最大文件描述符加1的大小。</li><li>与select相比，poll在处理大数量的文件描述符时速度更快</li><li>poll没有最大连接数的限制，因为其存储fd的数组没有长度限制</li><li>在调用poll函数时，只需要对参数进行一次设置就好了</li></ol><h4 id="poll的缺点"><a href="#poll的缺点" class="headerlink" title="poll的缺点"></a>poll的缺点</h4><ol><li>在调用poll函数时，不管有没有意义，大量fd的数组在用户态和内核地址空间之间被整体复制。</li><li>与select函数一样，poll函数返回后，需要遍历fd集合来获取就绪的fd，这样会使性能下降。</li><li>同时连接的大量客户端在某一时刻可能只有很少的就绪状态，因此随着监视的描述符数量的增长，其效率也会线性下降。</li></ol><h3 id="4-13-Linux-epoll模型"><a href="#4-13-Linux-epoll模型" class="headerlink" title="4.13 Linux epoll模型"></a>4.13 Linux epoll模型</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>要使用epoll模型，需要通过epoll_create函数来创建一个epollfd。</p><pre class="line-numbers language-none"><code class="language-none">#include &lt;sys/epoll.h&gt;int epoll_create(int size);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参数size需要设置成一个大于0的值。epoll_create函数调用成功，返回一个非负值的epollfd，否则返回-1。</p><p>epoll_ctl函数可以将需要检测事件的其他fd绑定到这个epollfd上，或者修改一个已经绑定上去的fd的事件类型，或者在不需要时将fd从epollfd上解绑。</p><pre class="line-numbers language-none"><code class="language-none">int epoll_ctl(int epfd, int op, int fd, struct epoll_event* event);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明：</p><p>1）epfd：即epollfd</p><p>2）op：操作类型，取值有EPOLL_CTL_ADD, EPOLL_CTL_MOD, EPOLL_CTL_DEL，分别表示在epollfd上添加、修改和移除fd。</p><p>3）fd：即要被操作的fd</p><p>4）event：这是一个epoll_event结构体的地址。定义如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct epoll_event{uint32_t event;// 需要检测的fd事件标志epoll_data_t data;//用户自定义数据}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5)函数返回值：若调用成功返回0，调用失败返回-1。</p><p>创建epollfd后，设置好某个fd上需要检测的事件并将该fd绑定到epollfd上，就可以调用epoll_wait函数检测事件了。</p><pre class="line-numbers language-none"><code class="language-none">int epoll_wait(int epfd, struct epoll_event* events, int maxevents, int timeout);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数events是一个epoll_event结构数组的首地址，是一个输出参数，在函数调用成功后，在events中存放的是与就绪事件相关的epoll_event结构体数组。参数maxevents是数组元素的个数。timeout是超时时间，单位是毫秒，如果设置为0，则epoll_wait会立即返回。</p><p>epoll_wait若调用成功，则返回有事件的fd数量。若返回0，则表示超时。若调用失败，则返回-1。</p><h4 id="LT模式和ET模式"><a href="#LT模式和ET模式" class="headerlink" title="LT模式和ET模式"></a>LT模式和ET模式</h4><p>epoll新增了一个事件宏EPOLLET，即边缘触发模式。</p><p>1）对于水平触发模式(LT)，一个事件只要有，就会一直触发。</p><p>2）对于边缘触发模式(ET)，在一个事件从无到有时才会触发。</p><h4 id="LT模式和ET模式处理读事件的区别"><a href="#LT模式和ET模式处理读事件的区别" class="headerlink" title="LT模式和ET模式处理读事件的区别"></a>LT模式和ET模式处理读事件的区别</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;sys/types.h&gt;#include &lt;sys/socket.h&gt;#include &lt;arpa/inet.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;sys/epoll.h&gt;#include &lt;poll.h&gt;#include &lt;iostream&gt;#include &lt;string.h&gt;#include &lt;vector&gt;#include &lt;errno.h&gt;int main(){    // 创建一个监听socket    int listenfd = socket(AF_INET, SOCK_STREAM, 0);    if (listenfd == -1)    {        std::cout &lt;&lt; "create listen socket error." &lt;&lt; std::endl;        return -1;    }        // 设置重用IP地址和端口号    int on = 1;    setsocket(listenfd, SOL_SOCKET, SO_REUSEADDR, (char*)&amp;on, sizeof(on));    setsocket(listenfd, SOL_SOCKET, SO_REUSEPORT, (char*)&amp;on, sizeof(on));        // 将监听socket设置为非阻塞的    int oldSocketFlag = fcntl(listenfd, F_GETFL, 0);    int newSocketFlag = oldSocketFlag | O_NONBLOCK;    if (fcntl(listenfd, F_SETFL, newSocketFlag) == -1)    {        close(listenfd);        std::cout &lt;&lt; "set listenfd to nonblock error." &lt;&lt; std::endl;        return -1;    }        // 初始化服务器地址    struct sockaddr_in bindaddr;    bindaddr.sin_family = AF_INET;    bindaddr.sin_addr.s_addr = htonl(INADDR_ANY);    bindaddr.sin_port = htons(3000);        if (bind(listenfd, (struct sockaddr*)&amp;bindaddr, sizeof(bindaddr)) == -1)    {        std::cout &lt;&lt; "bind listen socket error." &lt;&lt; std::endl;        close(listenfd);        return -1;    }        // 启动监听    if (listen(listenfd, SOMAXCONN) == -1)    {        std::cout &lt;&lt; "listen error." &lt;&lt; std::endl;        close(listenfd);        return -1;    }        // 创建epollfd    int epollfd = epoll_create(1);    if (epollfd == -1)    {        std::cout &lt;&lt; "create epollfd error." &lt;&lt; std::endl;        close(listenfd);        return -1;    }        epoll_event listen_fd_event;    listen_fd_event.data.fd = listenfd;    listen_fd_event.events = EPOLLIN;    // 使用ET模式    listen_fd_event.events |= EPOLLET;        // 将监听socket绑定到epollfd上    if (epoll_ctl(epollfd, EPOLL_CTL_ADD, listenfd, &amp;listen_fd_event) == -1)    {        std::cout &lt;&lt; "epoll_ctl error." &lt;&lt; std::endl;        close(listenfd);        return -1;    }        int n;    while (true)    {        epoll_event epoll_events[1024];        n = epoll_wait(epollfd, epoll_events, 1024, 1000);        if (n &lt; 0)        {            // 信号被中断            if (errno == EINTR)                continue;                        // 出错，退出            break;        }        else if (n == 0)        {            // 超时，继续            continue;        }                // 收到事件        for (size_t i=0; i&lt;n; ++i)        {            //事件可读            if (epoll_events[i].events &amp; EPOLLIN)            {                if (epoll_events[i].data.fd == listenfd)                {                    // 监听socket，接受新连接                    struct sockaddr_in clientaddr;                    sockelen_t clientaddrlen = sizeof(clientaddr);                    int clientfd = accept(listenfd, (struct sockaddr*)&amp;clientaddr, &amp;clientaddrlen);                    if (clientfd != -1)                    {                        int oldSocketFlag = fcntl(clientfd, F_GETFL, 0);                        int newSocketFlag = oldSocketFlag | O_NONBLOCK;                        if (fcntl(clientfd, F_SETFL, newSocketFlag) == -1)                        {                            close(clientfd);                            std::cout &lt;&lt; "set clientfd to nonblock error." &lt;&lt; std::endl;                        }                        else                        {                            epoll_event client_fd_event;                            client_fd_event.data.fd = clientfd;                            client_fd_event.events = EPOLLIN;                            //使用ET模式                            client_fd_event.events |= EPOLLET;                            if (epoll_ctl(epollfd, EPOLL_CTL_ADD, clientfd, &amp;client_fd_event) != -1)                            {                                std::cout &lt;&lt; "new client accepted, clientfd: " &lt;&lt; clientfd &lt;&lt; std::endl;                            }                            else                            {                                std::cout &lt;&lt; "add client fd to epollfd error." &lt;&lt; std::endl;                                close(clientfd);                            }                        }                                            }                }                else                {                    std::cout &lt;&lt; "client fd: " &lt;&lt; epoll_events[i].data.fd &lt;&lt; " recv data." &lt;&lt; std::endl;                    // 普通clientfd                    char ch;                    // 每次只接收1字节                    int m = recv(epoll_events[i].data.fd, &amp;ch, 1, 0);                    if (m == 0)                    {                        // 对端关闭了连接，从epollfd上移除clientfd                        if (epoll_ctl(epollfd, EPOLL_CTL_DEL, epoll_events[i].data.fd, NULL) != -1)                        {                            std::cout &lt;&lt; "client disconnected, clientfd: " &lt;&lt; epoll_events[i].data.fd &lt;&lt; std::endl;                        }                        close(epoll_events[i].data.fd);                    }                    else if (m &lt; 0)                    {                        // 出错                        if (errno != EWOULDBLOCK &amp;&amp; errno != EINTR)                        {                            if (epoll_ctl(epollfd, EPOLL_CTL_DEL, epoll_events[i].data.fd, NULL) != -1)                            {                                std::cout &lt;&lt; "client disconnected, clientfd: " &lt;&lt; epoll_events[i].data.fd &lt;&lt; std::endl;                                                         }                            close(epoll_events[i].data.fd);                        }                    }                    else                    {                        //正常收到数据                        std::cout &lt;&lt; "recv from client: " &lt;&lt; epoll_events[i].data.fd &lt;&lt; ", " &lt;&lt; ch &lt;&lt; std::endl;                    }                }            }            else if (epoll_events[i].events &amp; EPOLLERR)            {                // 暂不处理            }        }    }        close(listenfd);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>在LT模式下，读事件触发后可以按需收取想要的字节数，不用把本次接收的数据收取干净（即不用循环到recv或read函数返回-1，错误码为EWOULDBLOCK或EAGAIN）；在ET模式下，读事件时必须把数据收取干净，因为不一定再有机会收取数据了，即使有机会，也可能因为没有及时处理上次没读完的数据，造成客户端响应延迟。</li><li>在LT模式下，不需要写事件时一定要及时移除，避免不必要地触发且浪费CPU资源；在ET模式下，写事件触发后，如果还需要下一次的写事件触发来驱动任务，则需要继续注册一次检测可写事件。</li><li>LT模式和ET模式各有优缺点。使用LT模式时，可以自由决定每次收取多少字节或何时接收连接，但是可能会导致多次触发；使用ET模式时，必须每次都将数据接收完或立即调用accept函数接受连接，优点是触发次数少。</li></ol><h4 id="EPOLLONESHOT选项"><a href="#EPOLLONESHOT选项" class="headerlink" title="EPOLLONESHOT选项"></a>EPOLLONESHOT选项</h4><p>如果某个socket注册了EPOLLONESHOT标志，则其注册监听的事件在触发一次后再也不会触发，除非重新注册监听该事件类型。</p><h3 id="4-14-readv和writev函数"><a href="#4-14-readv和writev函数" class="headerlink" title="4.14 readv和writev函数"></a>4.14 readv和writev函数</h3><p>用来将一个文件描述符对应的文件或套接字中的数据读到多个缓冲区中，或将多个缓冲区中的数据同时写入一个文件描述符对应的文件或套接字中。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;sys/uio.h&gt;ssize_t readv(int fd, const struct iovec *iov, int iovcnt);ssize_t writev(int fd, const struct iovec *iov, int iovcnt);ssize_t preadv(int fd, const struct iovec *iov, int iovcnt, off_t offset);ssize_t pwritev(int fd, const struct iovec *iov, int iovcnt, off_t offset);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数iov是一个struct iovec数组，参数iovcnt是该数组元素的个数。</p><p>函数readv和preadv若调用成功，返回总读取字节数；函数writev和pwritev若调用成功，返回总写入字节数；函数调用失败返回-1。</p><p>struct iovec定义如下:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct iovec{void *iov_base;// 数据起始地址size_t iov_len;// 需要传输的字节数}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第六章-网络通信协议设计"><a href="#第六章-网络通信协议设计" class="headerlink" title="第六章 网络通信协议设计"></a>第六章 网络通信协议设计</h2><h3 id="6-1-理解TCP"><a href="#6-1-理解TCP" class="headerlink" title="6.1 理解TCP"></a>6.1 理解TCP</h3><p>TCP是流式协议，即协议的内容是流水一样的字节流，内容与内容之间没有明确的分界标志，需要我们人为地给这些内容划分边界。</p><h3 id="6-2-如何解决粘包问题"><a href="#6-2-如何解决粘包问题" class="headerlink" title="6.2 如何解决粘包问题"></a>6.2 如何解决粘包问题</h3><p>使用TCP进行通信，在大多数场景下是不存在丢包和包乱序问题的。就剩下解决粘包问题。</p><p>粘包就是连续向对端发送两个或两个以上的数据包，对端在一次收取中收到的数据包数量可能大于1个，可能是几个包加上某个包的部分。或者是只收取到一部分的包（半包）。</p><p>解决思路：从收到的数据中把包与包的边界区分出来。三种方法：</p><p>1）固定包长的数据包。简单但灵活性较差。</p><p>2）以指定的字符（串）为包的结束标志。需要对结束字符坐转码或转义操作。</p><p>3）包头 + 包体格式。将包分成两部分，包头是固定大小的，且包头必须包含一个字段来说明接下来的包体有多大。</p><h3 id="6-3-解包与处理"><a href="#6-3-解包与处理" class="headerlink" title="6.3 解包与处理"></a>6.3 解包与处理</h3><p>假设包头格式如下</p><pre class="line-numbers language-none"><code class="language-none">// 强制1字节对齐#pragma pack(push, 1)// 协议头struct msg_header{int32_t bodysize;// 包体大小};#pragma pack(pop)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理流程如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 包的最大字节数限制为10MB#define MAX_PACKAGE_SIZE10 * 1024 * 1024void ChatSession::OnRead(const std::shared_ptr&lt;TcpConnection&gt;&amp; conn, Buffer* pBuffer, Timestamp receivTime){    while (true)    {        if (pBuffer-&gt;readableBytes() &lt; (size_t)sizeof(msg_header))        {            // 不够一个包头的大小，直接退出            return;        }                // 取包头信息        msg_header header;        memcpy(&amp;header, pBuffer-&gt;peak(), sizeof(msg_header));                // 包头有错误，立即关闭连接        if (header.bodysize &lt;= 0 || header.bodysize &gt; MAX_PACKAGE_SIZE)        {            // 客户端发送非法数据包，服务器主动关闭它            LOGE("Illegal package, bodysize: %lld, close TcpConnection, client: %s", header.bodysize, conn-&gt;peerAddress().toIpPort().c_str());            conn-&gt;forceClose();            return;        }                // 收到的数据不够一个完整的包        if (pBuffer-&gt;readableBytes() &lt; (size_t)header.bodysize + sizeof(msg_header))            return;                pBuffer-&gt;retrieve(sizeof(msg_header));        // inbuf用来存放当前要处理的包        std::string inbuf;        inbuf.append(pBuffer-&gt;peek(), header.bodysize);        pBuffer-&gt;retrieve(header.bodysize);        // 解包和业务处理        if (!Process(conn, inbuf.c_str(), inbuf.length()))        {            // 客户端发送非法数据包，服务器主动关闭它            LOGE("Process package error, close TcpConnecton, client: %s", conn-&gt;peerAddress().toIpPort().c_str());            conn-&gt;forceClose();            return;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="需要注意的一些细节"><a href="#需要注意的一些细节" class="headerlink" title="需要注意的一些细节"></a>需要注意的一些细节</h4><p>1）取包头时应该拷贝一份数据包头大小的数据出来，而不是从缓冲区pBuffer中直接将数据取出来。</p><p>2）通过包头得到包体的大小时，一定要对bodysize的数值进行校验。防止非法bodysize对服务造成影响。</p><p>3）整个判断包头、包体及处理包的逻辑都被放在一个while循环里面。处理一次性收取的多个包。</p><h3 id="6-4-从struct到TLV"><a href="#6-4-从struct到TLV" class="headerlink" title="6.4 从struct到TLV"></a>6.4 从struct到TLV</h3><p>TLV（Type Length Value)：对于字符串类型的字段，可以在该字段前面加一个表示字符串长度的标志，来解决定义字符串类型时太长浪费、太短不够用的问题；通过在每个字段前面再添加一个type标志来表示常用的类型来解决修改协议需要兼容众多旧版本的问题。</p><h3 id="6-5-整型数值的压缩"><a href="#6-5-整型数值的压缩" class="headerlink" title="6.5 整型数值的压缩"></a>6.5 整型数值的压缩</h3><p>再实际处理中，1字节（Byte）共有8位（bit），该字节的最高位用来作为标志位，说明一个整型数值是否到此字节结束。如果某字节的最高位为0，则表示该整型值的内容到此字节为止；最高位为1，表示下一字节仍然是该整型值的内容。</p><p>对无符号int32的整型数值压缩算法:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// poco-master\Foundation\src\BinaryWriter.cpp// 将一个uint32压缩成1~5字节的算法void BinaryWrite::write7BitEncoded(UInt32 value){do{unsigned char c = (unsigned char) (value &amp; 0x7F);value &gt;&gt;= 7;if (value){c |= 0x80;}_ostr.write((const char*) &amp;c, 1);}while (value);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对无符号int32的整型数值解压缩算法:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 将一字节流中连续的1~5字节还原成一个uint32整型void BinaryReader::read7BitEncoded(UInt32&amp; value){char c;value 0;intv s = 0;do{c = 0;_istr.read(&amp;c, 1);UInt32 x = (c &amp; 0x7F);x &lt;&lt;= s;value += x;s += 7;}while (c &amp; 0x80);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-6-设计通信协议时的注意事项"><a href="#6-6-设计通信协议时的注意事项" class="headerlink" title="6.6 设计通信协议时的注意事项"></a>6.6 设计通信协议时的注意事项</h3><h4 id="字节对齐"><a href="#字节对齐" class="headerlink" title="字节对齐"></a>字节对齐</h4><p>使用#pragma pack(push, n)来告诉编译器将接下来的所有结构体的每个字段都按n字节对齐，这样做是为了使内存更加紧凑及节省存储空间。不需要对齐动能后，应该使用#pragma pack(pop)让编译器恢复之前的对齐方式。</p><h4 id="显式指定整型字段的长度"><a href="#显式指定整型字段的长度" class="headerlink" title="显式指定整型字段的长度"></a>显式指定整型字段的长度</h4><p>对于一个int字段，应该显式指定该类型的长度，如使用int32_t、int64_t这样的类型来代替int、long，避免因为不同机器字长的不同，导致协议解析出错或产生错误的结果。</p><h4 id="涉及浮点数时要考虑精度问题"><a href="#涉及浮点数时要考虑精度问题" class="headerlink" title="涉及浮点数时要考虑精度问题"></a>涉及浮点数时要考虑精度问题</h4><p>为了避免不同的机器解析浮点数得到不同的结果，建议在网络传输时将浮点数值放大相应的倍数，变成整数或者转换成字符串来传输。</p><h4 id="大小端的问题"><a href="#大小端的问题" class="headerlink" title="大小端的问题"></a>大小端的问题</h4><p>在设计协议格式时，如果在协议中存在整型字段，建议使用同一字节序。通常的做法是在进行网络传输时将所有则整型都转换为网络字节序（大端编码），避免不同的机器在解析时因为大小端问题而得到不同的整型。</p><h4 id="协议与自动升级功能"><a href="#协议与自动升级功能" class="headerlink" title="协议与自动升级功能"></a>协议与自动升级功能</h4><p>在客户端与服务器通信的所有协议格式中，自动升级协议是最重要的一个，无论版本如何迭代，一定要保证自动升级协议的新旧兼容。</p><h3 id="6-7-包分片"><a href="#6-7-包分片" class="headerlink" title="6.7 包分片"></a>6.7 包分片</h3><p>当一个包的数据较大，超过一个包的最长长度时，就需要对包进行分片。</p><p>设计包分片的两种思路：</p><p>1）设置分片标志</p><p>2）在每个包分片的包头部分都有该包的总分片数量和当前分片编号。</p><h4 id="一个具体的包分片例子"><a href="#一个具体的包分片例子" class="headerlink" title="一个具体的包分片例子"></a>一个具体的包分片例子</h4><p>协议头定义：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 与客户端交互协议包头#pragma pack(push, 1)typedef struct tagNtPkgHead{unsigned char bStartFlag;// 协议包起始标志0xFFunsigned char bVer;// 版本号unsigned char bEncryptFlay;// 加密标志（如果不加密，则为0）unsigned char bFrag;// 是否有包分片（1：有包分片；0：无包分片）unsigned short wLen;// 总包长unsigned short wCmd;// 命令号unsigned short wSeq;// 包的序列号，业务使用unsigned short wCrc;// Crc16校验码unsigned int dwSID;// 会话IDunsigned short wTotal;// 有包分片时的分片总数unsigned short wCurSeq;// 有包分片时的分片序号，从0开始，无分片时也为0} NtPkgHead, *PNtPkgHead;#pragma pack(pop)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对端处理包分片:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">UINT CSocketClient::RecvDataThreadProc(LPVOID lpParam){LOG_NORMAL("Start recv data thread.");DWORDdwWaitResult;std::stringstrPkg;// 临时存放一个完整的包数据的变量std::stringstrTotalPkg;unsigned shortuPkgLen = 0;unsigned int uBodyLen = 0;unsigned intuTotalPkgLen = 0;unsigned int uCmd = 0;NtPkgHeadpkgHead;unsigned shortuTotal = 0;// 记录上一次的包分片序号，包分片序号从0开始    unsigned shortuCurSeq = 0;    int nWaitTimeOut = 1;        CSocketClient*pSocketClient = (CSocketClient*)lpParam;        while (!m_bExit)    {        // 检测是否有数据        if (!pSocketClient-&gt;CheckReceivedData())        {            // 休眠10毫秒            Sleep(10);            continue;                   }                // 接收数据，并放入pSocketClient-&gt;m_strRecvBuf中        if (!pSocketClient-&gt;Recv())        {            LOG_ERROR("Recv data error");                        // 接收数据出错，清空接收缓冲区，可以做一些关闭连接、重连等动作            pSocketClient-&gt;m_strRecvBuf.clear();                        Reconnect();            continue;        }                // 一定要放在一个循环里解包，因为在当前缓冲区中可能有多个数据包        while (true)        {            // 判断当前收到的数据是否够一个包头大小            if (pSocketClient-&gt;m_strRecvBuf.length() &lt; sizeof(NtPkgHead))                break;                        memset(&amp;pkgHead, 0, sizeof(pkgHead));            memcpy_s(&amp;pkgHead, sizeof(pkgHead), pSocketClient-&gt;m_strRecvBuf.c_str(), sizeof(pkgHead));            // 对包消息头进行检验            if (!CheckPkgHead(&amp;pkgHead))            {                // 如果包头检验不通过，则缓冲区里面的数据已经是脏数据了，直接清空。                // 可以做一些关闭连接并重连的动作                LOG_ERROR("Check packet head error, discard data %d bytes", (int)pSocketClient-&gt;m_strRecvBuf.length());                                pSocketClient-&gt;m_strRecvBuf.clear();                                Reconnect();                break;            }                        // 判断当前数据是否够一个整包的大小            uPkgLen = ntohs(pkgHead.wLen);            if (pSocketClient-&gt;m_strRecvBuf.length() &lt; uPkgLen)                break;                        strPkg.clear();            strPkg.append(pSocketClient-&gt;m_strRecvBuf.c_str(), uPkgLen);                        // 从接收缓冲区中移除已经处理的数据部分            pSocketClient-&gt;m_strRecvBuf.erase(0, uPkgLen);                        uTotal = ::ntohs(pkgHead.wTotal);            uCurSeq = ::ntohs(pkgHead.wCurSeq);            // 无分片或者是第一个分片            if (uCurSeq == 0)            {                strTotalPkg.clear();                uTotalPkgLen = 0;            }                        uBodyLen = uPkgLen - sizeof(NtPkgHead);            uTotalPkgLen += uBodyLen;            strTotalPkg.append(strPkg.data() + sizeof(NtPkgHead), uBodyLen);                        // 如果无分片或者是包的最后一个分片，则将组装后的包发送出去            if (uTotal == 0 || (uTotal != 0 &amp;&amp; uTotal == uCurSeq +1))            {                uCmd = ::ntohs(pkgHead.wCmd);                                // ProxyPackage是解析处理的业务包定义                ProxyPackage proxyPackage;                // 复制业务号                proxyPackage.nCmd = uCmd;                // 复制包长度                proxyPackage.nLength = uTotalPkgLen;                // 复制包体内容                proxyPackage.pszJson = new char[uTotalPkgLen];                memset(proxyPackage.pszJson, 0, uTotalPkgLen * sizeof(char));                memcpy_s(proxyPackage.psaJson, uTotalPkgLen, strTotalPkg.c_str(), strTotalPkg.length());                                // 将一个完整的包交给业务处理                pSocketClient-&gt;m_pNetProxy-&gt;AddPackage((const char*)&amp;proxyPackage, sizeof(proxyPackage));            }        }    }        LOG_NORMAL("Exit recv data thread.");    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-8-XML-和-JSON-格式-的协议"><a href="#6-8-XML-和-JSON-格式-的协议" class="headerlink" title="6.8 XML 和 JSON 格式 的协议"></a>6.8 XML 和 JSON 格式 的协议</h3><p>XML和JSON这两种格式由于其良好的自我解释性，是开发中使用非常广泛的两种数据格式。</p><p>在通常情况下，XML或JSON格式不会被单独作为协议格式，而是作为某个协议的一部分出现。</p><h3 id="6-9-一个自定义协议示例"><a href="#6-9-一个自定义协议示例" class="headerlink" title="6.9 一个自定义协议示例"></a>6.9 一个自定义协议示例</h3><h3 id="6-10-理解HTTP"><a href="#6-10-理解HTTP" class="headerlink" title="6.10 理解HTTP"></a>6.10 理解HTTP</h3><p>HTTP由包头和包体两部分组成，包头与包体之间使用一个 \r\n 分割，包头的每一行均以 \r\n 结束，在包头结束时再添加一个 \r\n 表示包头结束。因此在用程序解析HTTP格式的数据时可以通过\r\n\r\n界定包头的结束位置和包体的起始位置。</p><h4 id="GET与POST方法"><a href="#GET与POST方法" class="headerlink" title="GET与POST方法"></a>GET与POST方法</h4><p>如果GET请求带参数，那么参数一般被附加在请求的URL后面，参数与参数之间使用&amp;分割。</p><p>POST请求的数据被放在HTTP包体中(/r/n/r/n标志之后)。要知道包体部分的长度，一种方式是采用HTTP chunk，一种方式是在包头中设置一个Content-Length字段，这个字段的值标识了包体的长度。</p><p>GET与POST请求的安全性都是差不多的，在对安全要求更高的应用中，会将SSL与HTTP结合起来，即HTTPS。</p><h4 id="HTTP-chunk编码"><a href="#HTTP-chunk编码" class="headerlink" title="HTTP chunk编码"></a>HTTP chunk编码</h4><p>HTTP在传输的过程中如果包体过大，或者传输产生的内容给对端时，传输方无法预先知道传输的内容有多大，这是可以使用HTTP chunk编码技术。</p><p>HTTP chunk编码的技术原理是将整个HTTP包体分成多个小块，每一块都有自己的字段来说明自身的长度，对端收到这些块后，去除说明的部分，将多个小块合并在一起得到完整的包体内容。</p><h4 id="HTTP-服务端的实现"><a href="#HTTP-服务端的实现" class="headerlink" title="HTTP 服务端的实现"></a>HTTP 服务端的实现</h4><p>假设用户在浏览器中输入了以下内容，以实现一个注册功能:</p><pre class="line-numbers language-none"><code class="language-none">http://101.37.25.166:12345/register.do?p={"username": "12917043329", "nickname": "balloon", "password": "123"}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>收到数据后按如下逻辑进行处理:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void HttpSession::OnRead(const std::shared_ptr&lt;TcpConnection&gt;&amp; conn, Buffer* pBuffer, Timestamp recriveTime){string inbuf;    // 先把所有数据都取出来    inbuf.append(pBuffer-&gt;peek(), pBuffer-&gt;readableBytes());    // 因为一个HTTP包头的数据至少有\r\n\r\n，所以大于4个字符    // 若小于或等于4个字符，则说明数据未收完，退出，等待网络底层接着收取    if (inbuf.length() &lt;= 4)        return;        // 检查是否以\r\n\r\n结束，如果不是，则说明包头不完整，退出    string end = inbuf.substr(inbuf.length() - 4);    if (end != "\r\n\r\n")    {         if (inbuf.length() &gt;= MAX_URL_LENGTH)        {            // 超过2048个字符，且不含有\r\n\r\n，认为是非法请求            conn-&gt;forceClose()        }        return;    }               // 以\r\n分割每一行    std::vector&lt;string&gt; lines;    StringUtil::Split(inbuf, lines, "\r\n");    if (lines.size() &lt; 1 || lines[0].empty())    {        conn-&gt;forceClose();        return;    }        std::vector&lt;string&gt; chunk;    StringUtil::Split(liens[0], chunk, " ");    // 在chunk中至少有3个字符串：GET\URL\HTTP版本号    if (chunk.size() &lt; 3)    {        conn-&gt;forceClose();        return;    }        LOG_INFO &lt;&lt; "url: " &lt;&lt; chunk[1] &lt;&lt; " from " &lt;&lt; conn-&gt;peerAddress().toIpPort();    std::vector&lt;string&gt; part;    // 通过“？”分割成前后两端，前面是URL，后面是参数    StringUtil::Split(chunk[1], part, "?");    if (part.size() &lt; 2)    {        conn-&gt;forceClose();        return;    }        string url = part[0];    string param = part[1].substr(2);        if (!Process(conn, url, param))    {        LOG_ERROR &lt;&lt; "handle http request error, from: " &lt;&lt; conn-&gt;peerAddress().toIpPort() &lt;&lt; ", request: " &lt;&lt; pBuffer-&gt;retrieveAllAsString();    }    // 短连接，处理完毕后关闭连接    conn-&gt;forceClose();    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据URL匹配网址</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool HttpSession::Process(const std::shared_ptr&lt;TcpConnection&gt;&amp; conn, const std::string&amp; url, const std::string&amp; param){if (url.empty())return false;if (url == "/register.do")OnRegisterResponse(param, conn);else if (url == "/login.do")OnLoginResponse(param, conn);elsereturn false;return true;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是注册请求，则会走注册处理逻辑</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void HttpSession::OnRegisterResponse(const std::string&amp; data, const std::shared_ptr&lt;TcpConnection&gt;&amp; conn){string retData;string decodeData;URLEncodeUtil::Decode(data, decodeData);BussinessLogic::RegisterUser(decodeData, conn, false, retData);if (!retData.empty()){std::string response;URLEncodeUtil::Encode(retData, response);MakeupResponse(retData, response);conn-&gt;send(response);LOG_INFO &lt;&lt; "Response to client: cmd=msg_type_register" &lt;&lt; ", data=" &lt;&lt; retData &lt;&lt; conn-&gt;peerAddress().toIpPort();}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HTTP-与-长连接"><a href="#HTTP-与-长连接" class="headerlink" title="HTTP 与 长连接"></a>HTTP 与 长连接</h4><p>对于一些特定场景会用到HTTP长连接，可以在HTTP头中设置keepalive字段，用于建议连接的双方使用长连接进行通信，而不是对每次请求都建立新的连接。但这只是一个建议选项，web服务器可能不遵循keepalive字段的建议。</p><p>Libcurl是一个跨平台的用于发送HTTP请求的第三方库，基本使用方法如下:</p><p>1）使用curl_easy_init函数初始化一个CURL对象</p><pre class="line-numbers language-none"><code class="language-none">CURL* curl = curl_easy_init();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）调用curl_easy_setopt函数为CURL对象设置相关选项，如请求的URL地址，方法，最大超时时间等</p><pre class="line-numbers language-none"><code class="language-none">// 设置请求的URLcurl_easy_setopt(curl, CURLOPT_URL, url);// 若设置CURLOPT_POST这个选项，则使用POST方法进行请求，否则使用GET方法curl_easy_setopt(curl, CURLOPT_POST, 1L);// 设置连接超时时间curl_easy_setopt(curl, CURLOPT_CONNECTTIMEOUT, connTimeout);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）调用curl_easy_perform函数发送实际的HTTP请求，并得到一个类型为CURLcode的返回值，如果返回值为CURLE_OK，则说明请求成功。</p><pre class="line-numbers language-none"><code class="language-none">CURLcode ret = curl_easy_perform(curl);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4）无论调用成功与否，都调用curl_easy_cleanup函数释放curl_easy_init函数分配的CURL对象。</p><pre class="line-numbers language-none"><code class="language-none">curl_easy_cleanup(curl);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-11-SMTP和POP3"><a href="#6-11-SMTP和POP3" class="headerlink" title="6.11 SMTP和POP3"></a>6.11 SMTP和POP3</h3><h4 id="邮件协议简介"><a href="#邮件协议简介" class="headerlink" title="邮件协议简介"></a>邮件协议简介</h4><p>1）POP3：规定了怎样将个人计算机连接到Internet的邮件服务器和下载电子邮件的电子协议，是因特网电子邮件的第一个离线协议标准，允许用户从服务器上把邮件存储到本地主机上，同时删除保存在邮件服务器上的邮件。</p><p>2）SMTP：是一组用于从源地址到目的地址传输邮件的规范，帮助每台计算机在发送或中转邮件时都找到下一个目的地。</p><p>3）IMAP是与POP3协议类似的邮件访问标准协议之一。不同的是，开启了IMAP后，在电子邮件客户端收取的邮件仍然保留在服务器上，同时客户端上的操作都会被反馈到服务器上，而POP3对邮件的操作只会在本地邮件客户端上起作用。</p><h4 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h4><p>SMTP用于发送邮件，格式如下：</p><pre class="line-numbers language-none"><code class="language-none">关键字 自定义内容\r\n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设现在要实现一个邮件报警系统，用一个SmtpSocket类来综合常用邮件的功能。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 发送邮件类，SmtpSocket.h#pragma once#include &lt;string&gt;#include &lt;vector&gt;#include "Platform.h"class SmtpSocket final{public:    static bool sendMail(const std::string&amp; server, short port, const std::string&amp; from, const std::string&amp; fromPassword, const std::vector&lt;std::string&gt;&amp; to, const std::string&amp; subject, const std::string&amp; mailData);    public:    SmtpSocket(void);    ~SmtpSocket(void);        bool isConnected() const { return m_hSocket; }    bool connected(const char* pszUrl, short port = 25);    bool logon(const char* pszUser, const char* pszPassword);    bool setMailFrom(const char* pszFrom);    bool setMailTo(const std::vector&lt;std::string&gt;&amp; sendTo);    bool send(const std::string&amp; subject, const std::string&amp; mailData);        void closeConnection();    void quit();private:    // 验证从服务器返回的前三位代码和传递进来的参数是否一样    bool checkResponse(const char* recvCode);    private:    boolm_bConnected;    SOCKETm_hSocket;    std::stringm_strUser;    std::stringm_strPassword;    std::stringm_strFrom;    std::vector&lt;std::string&gt;m_strTo;};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SmtpSocket.cpp：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include "SmtpSocket.h"#include &lt;sstream&gt;#include &lt;time.h&gt;#include &lt;string.h&gt;#include "Base64Util.h"#include "Platform.h"bool SmtpSocket::sendMail(const std::string&amp; server, short port, const std::string&amp; from, const std::string&amp; fromPassword, const std::vector&lt;std::string&gt;&amp; to, const std::string&amp; subject, const std::string&amp; mailData){    size_t atSymbolPos = from.find_first_of("@");    if (atSymbolPos == std::string::npos)        return false;        std::string strUser = from.substr(0, atSymbolPos);        SmtpSocket smtpSocket;    // smtp.163.com 25    if (!smtpSocket.connect(server.c_str(), port))        return false;        // testformmybook 2019hhxxttxs    if (!smtpSocket.logon(strUser.c_str(), fromPassword.c_str()))        return false;        // testformmybook@163.com    if (!smtpSocket.setMailFrom(from.c_str()))        return false;        if (!smtpSocket.setMailTo(to))        return false;        if (!smtpSocket.send(subject, mailData))        return false;        return true;}SmtpSocket::SmtpSocket() : m_bConnected(false), m_hSocket(-1) {}SmtpSocket::~SmtpSocket(){    quit();}bool SmtpSocket::checkResponse(const char* recvCode){    char recvBuffer[1024] = { 0 };    long lResult = 0;    lResult = recv(m_hSocket, recvBuffer, 1024, 0);    if (lResult == SOCKET_ERROR || lResult &lt; 3)        return false;        return recvCode[0] == recvBuffer[0] &amp;&amp; \        recvCode[1] == recvBuffer[1] &amp;&amp; \        recvCode[2] == recvBuffer[2] ? true : false ;}void SmtpSocket::quit(){    if (m_hSocket &lt; 0)        return;        // 退出    if (::send(m_hSocket, "QUIT\r\n", strlen("QUIT\r\n"), 0) == SOCKET_ERROR)    {        closeConnection();        return;    }        if (!checkResponse("221"))        return;}bool SmtpSocket::logon(const char* pszUser, const char* pszPassword){    if (m_hSocket &lt; 0)        return false;        // 发送 "AUTH LOGIN"    if (::send(m_hSocket, "AUTH LOGIN\r\n", strlen("AUTH LOGIN\r\n"), 0) == SOCKET_ERROR)        return false;        if (!checkResponse("334"))        return false;        // 发送经base64编码的用户名    char szUserEncoded[64] = {0};    Base64Util::encode(szUserEncoded, pszUser, strlen(pszUser), '='. 64);    strncat(szUserEncoded, "\r\n", 64);        if (::send(m_hSocket, szUserEncoded, strlen(szUserEncoded), 0) == SOCKET_ERROR)        return false;        if (!checkResponse("334"))        return false;        // 发送经base64编码的密码    // 验证密码    char szPwdEncoded[64] = {0};    Base64Util::encode(szPwdEncoded, pszPassword, strlen(pszPassword), '=', 64);    strcat(szPwdEncoded, "\r\n", 64);    if (::send(m_hSocket, szPwdEncoded, strlen(szPwdEncoded), 0) == SOCKET_ERROR)        return false;        if (!checkResponse("235"))        return false;        m_strUser = pszUser;    m_strPassword = pszPassword;        return true;}void SmtpSocket::closeConnection(){    if (m_hSocket &gt;= 0)    {        closesocket(m_hSocket);        m_hSocket = -1;        m_bConnected = false;    }}bool SmtpSocket::connect(const char* pszUrl, short port){    struct sockaddr_in server = { 0 };    struct hostent* pHostent = NULL;    unsigned int addr = 0;        closeConnection();    m_hSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);        if (m_hSocket &lt; 0)        return false;        long tmSend(15 * 1000L), tmRecv(15 * 1000L), noDelay(1);    setsockopt(m_hSocket, IPPROTO_TCP, TCP_NODELAY, (char*)&amp; noDelay, sizeof(long));    setsockopt(m_hSocket, SOL_SOCKET, SO_SNDTIMEO, (char*)&amp; tmSend, sizeof(long));    setsockopt(m_hSocket, SOL_SOCKET, SO_RCVTIMEO, (char*)&amp; tmRecv, sizeof(long));        if (inet_addr(pszUrl) == INADDR_NONE)    {        pHostent = gethostbyname(pszUrl);    }    else    {        addr = inet_addr(pszUrl);        pHostent = gethostbyaddr((char*)&amp; addr, sizeof(addr), AF_INET);    }        if (!pHostent)        return false;        server.sin_family = AF_INET;    server.sin_port = htons((u_short)port);    server.sin_addr.s_addr = *((unsigned long*)pHostent-&gt;h_addr);    if (::conncet(m_hSocket, (struct sockaddr*)&amp; server, sizeof(server)) == SOCKET_ERROR)        return false;        if (!checkResponse("220"))        return false;        // 向服务器发送"HELO" + 服务器名    // string strTmp = "HELO " + SmtpAddr + "\r\n";    char szSend[256] = {0};    snprintf(szSend, sizeof(szSend), "HELO %s\r\n", pszUrl);    if (::send(m_hSocket, szSend, strlen(szSend), 0) == SOCKET_ERROR)        return false;        if (!checkResponse("250"))        return false;        m_bConnected = true;        return true;}bool SmtpSocket::setMailFrom(const char* pszFrom){    if (m_hSocket &lt; 0)        return false;        char szSend[256] = {0};    snprintf(szSend, sizeof(szSend), "MAIL FROM:&lt;%s&gt;\r\n", pszFrom);    if (::send(m_hSocket, szSend, strlen(szSend), 0) == SOCKET_ERROR)    return false;        if (!checkResponse("250"))        return false;        m_strFrom = pszFrom;    return true;}bool SmtpSocket::setMailTo(const std::vector&lt;std::string&gt;&amp; sendTo){    if (m_hSocket &lt; 0)        return false;        char szSend[256] = {0};    for (const auto&amp; iter : sendTo)    {        snprintf(szSend, sizeof(szSend)m "rept to: &lt;%s&gt;\r\n", iter.c_str());        if (::send(m_hSocket, szSend, strlen(szSend), 0) == SOCKET_ERROR)            return false;                if (!checkResponse("250"))            return false;    }    m_strTo = sendTo;    return true;}bool SmtpSocket::send(const std::string&amp; subject, const std::string&amp; mailData){    if (m_hSocket &lt; 0)        return false;        std::ostringstream osContent;        // 注意：邮件正文的内容与其他附属字样之间一定要空一行    osContent &lt;&lt; "Date: " &lt;&lt; time(nullptr) &lt;&lt; "\r\n";    osContent &lt;&lt; "from: " &lt;&lt; m_strFrom &lt;&lt; "\r\n";    osContent &lt;&lt; "to: ";    for (const auto&amp; iter : m_strTo)    {        osContent &lt;&lt; iter &lt;&lt; ";";    }    osContent &lt;&lt; "\r\n";    osContent &lt;&lt; "subject: " &lt;&lt; subject &lt;&lt; "\r\n";    osContent &lt;&lt; "Content-Type: text/plain; charset=UTF-8\r\n";    osContent &lt;&lt; "Content-Transfer-Encoding: quoted-printable\r\n\r\n";    osContent &lt;&lt; mailData &lt;&lt; "\r\n.\r\n";        std::string data = osContent.str();    const char* lpSendBuffer = data.c_str();        // 发送"DATA\r\n"    if (::send(m_hSocket, "DATA\r\n", strlen("DATA\r\n"), 0) == SOCKET_ERROR)        return false;        if (!checkResponse("354"))        return false;        long dwSend = 0;    long dwOffset = 0;    long lTotal = data.length();    long lResult = 0;    const long SEND_MAX_SIZE = 1024 * 100000;    while ((long)dwoffset &lt; lTotal)    {        if (lTotal - dwOffset &gt; SEND_MAX_SIZE)            dwSend = SEND_MAX_SIZE;        else            dwSend = lTotal - dwOffset;                lResult = ::send(m_hSocket, lpSendBuffer + dwOffset, dwSend, 0);        if (lResult == SOCKET_ERROR)            return false;                dwOffset += lResult;    }    if (!checkResponse("250"))        return false;        return true;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用另外一个类MailMonitor对SmtpSocket对象的功能进行高层抽象</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// MailMonitor.h#pragma once#include &lt;string&gt;#include &lt;vector&gt;#include &lt;list&gt;#include &lt;memory&gt;#include &lt;mutex&gt;#include &lt;condition_variable&gt;#include &lt;thread&gt;struct MailItem{    std::string subject;    std::string content;};class MailMonitor final{public:    static MailMonitor&amp; getInstance();    private:    MailMonitor() = default;    ~MailMonitor() = default;    MailMonitor(const MailMonitor&amp; rhs) = delete;    MailMonitor&amp; operator=(const MailMonitor&amp; rhs) = delete;    public:    bool initMonitorMailInfo(const std::string&amp; servername, const std::string&amp; mailserver, short mailport, const std::string&amp; mailfrom, const std::string&amp; mailfromPassword, const std::string&amp; mailto);    void uninit();    void wait();        void run();        bool alert(const std::string&amp; subject, const std::string&amp; content);    private:    void alertThread();        void split(const std::string&amp; str, std::vector&lt;std::string&gt;&amp; v, const char* delimiter="|");    private:    // 用于标识是哪一台服务器发送的邮件    std::stringm_strMailName;    std::stfingm_strMailServer;    shortm_nMailPort;    std::stringm_strFrom;    std::stringm_strFromPassword;    std::vector&lt;std::string&gt; m_strMailTo;    // 待写入的日志    std::list&lt;MailItem&gt;m_listMailIteamsToSend;    std::shared_ptr&lt;std::thread&gt;m_spMailAlertThread;    std::mutexm_mutexAlert;    std::condition_variablem_cvAlert;    // 退出标志    boolm_bExit;    // 运行标志    boolm_bRunning;};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MailMonitor.cpp</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include "MailMonitor.h"#include &lt;functional&gt;#include &lt;sstream&gt;#include &lt;iostram&gt;#include &lt;string.h&gt;#include "SmtpSocket.h"MailMonitor&amp; MailMonitor::getInstance(){    static MailMonitor instance;    return instance;}bool MailMonitor::initMonitorMailInfo(const std::string&amp; servername, const std::string&amp; mailServer, short mailport, const std::string&amp; mailfrom, const std::string&amp; mailfromPassword, const std::string&amp; mallto){    m_strMailName = servername;    m_strMailServer = mailserver;    m_nMailPort = mailport;    m_strFromPassword = mailfromPassword;    split(mailto, m_strMailTo, ";");        std::ostringstream osSubject;    osSubject &lt;&lt; "[" &lt;&lt; m_strMailName &lt;&lt; "]";        SmtpSocket::sendMail(m_strMailServer, m_nMailPort, m_strFrom, m_strFromPassword, m_strMailTo, osSubject.str(), "You have started Mail Alert System.");    return true;}void MailMonitor::uninit(){    m_bExit = true;    m_cvAlert.notify_one();    if (m_spMailAlertThread-&gt;joinable())        m_spMailAlertThread-&gt;join();}void MailMonitor::wait(){    if (m_spMailAlertThread-&gt;joinable())        m_spMailAlertThread-&gt;join();}void MailMonitor::run(){    m_spMailAlertThread.reset(new std::thread(std::bind(&amp;MailMonitor::alertThread, this)));    }void MailMonitor::alertThread(){    m_bRunning = true;        while (true)    {        MailItem mailItem;        {            std::unique_lock&lt;std::mutex&gt; guard(m_mutexAlert);            while (m_listMailItemsToSend.empty())            {                if (m_bExit)                    return;                                m_cvAlert.wait(guard);            }            mailItem = m_listMailItemsToSend.front();            m_listMailItemsToSend.pop_front();        }        std::ostringstream osSubject;        osSubject &lt;&lt; "[" &lt;&lt; m_strMailName &lt;&lt; "]" &lt;&lt; mailItem.subject;        SmtpSocket::sendMail(m_strMailServer, m_nMailPort, m_strFrom, m_strFromPassword, m_strMailTo, osSubject.str(), mailItem.content);    }    m_bRunning = false;}bool MailMonitor::alert(const std::string&amp; subject, const std::string&amp; content){    if (m_strMailServer.empty() || m_nMailPort &lt; 0 || m_strFrom.empyt() || m_strFromPassword.empty() || m_strMailTo.empty())        return false;        MailItem mailItem;    mailItem.subject = subject;    mailItem.content = content;        {        std::lock_guard&lt;std::mutex&gt; lock_guard(m_mutexAlert);        m_listMailItemsToSend.push_back(mailItem);        m_cvAlert.notify_one();    }    return true;}void MailMonitor::split(const std::string&amp; str, std::vector&lt;std::string&gt;&amp; v, const char* delimiter){    if (delimiter == NULL || str.empty())        return;        std::string buf(str);    size_t pos = std::string::npos;    std::string substr;    int delimiterlength = strlen(delimiter);    while (true)    {        pos = buf.find(delimiter);        if (pos != std::string::npos)        {            substr = buf.substr(0, pos);            if (!substr.empty())                v.push_back(substr);                        buf = buf.substr(pos + delimiterlength);        }        else        {            if (!buf.empty())                v.push_back(buf);            break;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在main函数中模拟生成一条新的报警邮件</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;stdlib.h&gt;#include "Platform.h"#include "MailMonitor.h"// Winsock网络库初始化#ifdef WIN32NetworkInitializer windowsNetworkInitializer;#endif#ifndef WIN32void prog_exit(int signo){    std::cout &lt;&lt; "program recv signal [" &lt;&lt; signa &lt;&lt; "] to exit." &lt;&lt; std::endl;        // 停止邮件发送服务    MailMonitor::getInstance().uninit();}#endifconst std::string servername = "MailAlertSystem";const std::string mailserver = "smtp.163.com";const short mailport = 25;const std::string mailuser = "testformmybook@163.com";const std::string mailpassword = "2019hhxxttxs";const std::string mailto = "balloonwj@qq.com;analogous_love@qq.com";int main(int argc, char* argv[]){#ifndef WIN32    // 设置信号处理    signal(SIGCHLD, SIG_DFL);    signal(SIGPIPE, SIG_IGN);    signal(SIGINT, prog_exit);    signal(SIGTREM, prog_exit);#endif        bool bInitSuccess = MailMonitor::getInstance().initMonitorMailInfo(servername, mailserver, mailport, mailuser, mailpassword, mailto);    if (bInitSuccess)        MailMonitor::getInstance().run();        const std::string subject = "Alert Mail";    const std::string content = "This is an alert mail from " + mailuser;    MailMonitor::getInstance().alert(subject, content);    // 等待邮件报警线程退出    MailMonitor::getInstance().wait();        return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-12-WebSocket协议"><a href="#6-12-WebSocket协议" class="headerlink" title="6.12 WebSocket协议"></a>6.12 WebSocket协议</h3><h2 id="7-单个服务的基本结构"><a href="#7-单个服务的基本结构" class="headerlink" title="7 单个服务的基本结构"></a>7 单个服务的基本结构</h2><h3 id="7-1-网络通信组件的效率问题"><a href="#7-1-网络通信组件的效率问题" class="headerlink" title="7.1 网络通信组件的效率问题"></a>7.1 网络通信组件的效率问题</h3><h4 id="建议遵循的设计原则"><a href="#建议遵循的设计原则" class="headerlink" title="建议遵循的设计原则"></a>建议遵循的设计原则</h4><p>1）尽量少等待</p><p>一个好的网络通信框架至少要解决以下7个问题：</p><ul><li>如何检测有新的客户端连接到来？</li><li>如何接受客户端的连接请求？</li><li>如何检测客户端是否有数据发送过来？</li><li>如何收取客户端发送的数据？</li><li>如何检测异常的客户端连接？检测到之后该如何处理？</li><li>如何向客户端发送数据？</li><li>如何在客户端发送完数据后关闭连接？</li></ul><p>需要巧妙地组织基础的socket API来解决这些问题。</p><p>举几个工作效率不是最优的网络通信的例子：</p><ul><li>默认情况下，在recv函数没有数据时，线程会阻塞在recv函数调用处。</li><li>默认情况下，如果TCP窗口不是足够大，则数据无法发出，send函数也会阻塞当前调用线程。</li><li>默认情况下，connect函数发起连接时会有一定时长的阻塞。</li><li>向对端发送一段数据，接着使用recv函数接收对端的应答数据，如果对端一直不应答，当前调用线程就会阻塞在recv函数调用处。</li></ul><p>2）尽量减少做无用功的时间</p><p>I/O复用函数可以分为以下两个级别：</p><p>·第一级别：select和poll</p><p>select和poll函数在本质上还是在一定时间内主动查询在一组socket句柄上是否有网络事件发生。也就是说，必须每隔一段时间就主动做这些检测操作。如果在这段时间内没有事件发生，就相当于做了无用功，是对系统资源的一种浪费。</p><p>·第二级别：WSAAsyncSelect, WSAEventSelect, IOCP, epoll</p><p>第二级别的函数相当于变主动查询为被动查询，即网络事件发生时，系统会通知我们处理。</p><p>对网络通信组件的性能有高要求时，尽量不要主动查询各个socket事件，而是等待操作系统通知我们。</p><p>在使用I/O复用API时，如果某个socket失效，就应该及时从I/O复用API上移除该socket，否则可能造成死循环或者浪费CPU检测周期的问题。</p><p>3）检测网络事件的高效做法</p><p>对于第1、2个问题，在默认情况下，如果没有新的客户端连接请求，则对监听socket调用accept函数会阻塞调用线程，使用I/O复用函数以后，如果epoll_wait函数检测到监听socket有EPOLLIN事件，就表明此时有新连接到了，再调用accept函数就不会阻塞调用线程了。</p><p>对于第3、4个问题，调用accept函数返回的新socket也应该被设置成非阻塞模式，而且应该在epoll_wait函数报告这个socket有可读事件时收取数据，这样才不会做无用功。</p><p>对于第5个问题，若I/O复用函数收到异常事件或关闭事件的通知，就知道有异常产生了，对异常的处理一般是关闭相应的socket。另外，如果send/recv函数操作某个socket时返回0，则一般可以认为对端关闭了连接，对于本端，此时这条连接也没有存在的必要了，可以关闭本段的socket。由于TCP连接是状态机，I/O复用函数一般无法检测处两个端点之间路由错误导致的链路问题，所以对于这种情形，需要通过定时器结合心跳包来检测。</p><p>对于第6个问题，向客户端发送数据比收取数据麻烦一点。在epoll模型水平触发模式下，如果有数据要发送，则先调用send或write函数尝试直接发送；如果发送不了或者只发送出去一部分，则将剩余的数据先缓存起来，再为该socket注册检测写事件标志，等下次写事件触发时再发送剩余的数据；如果剩下的数据还是不能完全发送完，则继续等待下一次写事件触发通知，如此反复，直到所有数据都发送出去为止。一旦所有数据都发送出去了，就及时为socket移除检测写事件标志，避免再次触发无用的写事件通知。</p><p>对于第7个问题，这里的“发送完”不一定是真的发送完，目前只能简单地认为send或者write函数返回期望的字节数时，就是数据发送完成。在这种情形下发送完数据后，就可以关闭连接了。也可以使用shutdown函数达到“半关闭”效果。</p><h4 id="连接的被动关闭与主动关闭"><a href="#连接的被动关闭与主动关闭" class="headerlink" title="连接的被动关闭与主动关闭"></a>连接的被动关闭与主动关闭</h4><p>在实际应用中，连接的被动关闭指检测到了连接的异常事件(如：触发EPOLLERR事件、send/recv函数返回0使对端关闭连接)，这时这路连接已经没有存在的必要了，需要被迫关闭连接。而主动关闭连接指主动调用close/closesocket函数关闭socket来关闭某个连接，例如客户端向服务端发送了非法数据，这时服务端出于安全考虑，需要主动关闭与该客户端的连接。</p><h3 id="7-2-原始的服务器结构"><a href="#7-2-原始的服务器结构" class="headerlink" title="7.2 原始的服务器结构"></a>7.2 原始的服务器结构</h3><p>单个服务器的结构是随着业务需求的升级而不断演进的。原始的服务器结构，是创建好监听socket，在一个循环里面接受新的连接并产生对应的客户端fd，然后利用这个客户端fd与客户端通信。</p><p>在这种结构中，程序在每轮循环中都只能处理一个客户端的连接请求，要处理下一个客户端的连接请求，就必须等当前操作完成后进入下一轮循环才行。缺点：不支持并发。</p><p>7.3 一个连接对应一个线程模型</p><p>因为原始的服务器不支持并发，随着计算机引入多线程模型，出现了另一种服务器结构，即为每一个客户端连接都创建一个线程，这样多个线程就可以并行执行，在每个独立的线程中为对应的客户端提供服务。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 监听线程UINT WINAPI MyMainThread(LPVOID lPvoid){UINTnThreadID = 0;SOCKETsListenSocket = (SOCKET)lPvoid;SOCKET sClientSocket = 0;while (1){// 等待客户连接sockaddr_in clientAddr = {0};        int clientAddrLength = sizeof(clientAddr);        if ((sClientSocket = accept(sListenSocket, (struct sockaddr*)&amp;clientAddr, &amp;clientAddrLength)) == INVALID_SOCKET)            break;                LOG_NORMAL("New client connected: %s:%d", inet_ntoa(clientAddr.sin_addr), ntohs(clientAddr.sin_port));        // 启动客户签到线程        _beginthreadex(NULL, 0, MyCliendThread, (LPVOID)sClientSocket, 0, &amp;nThreadID);        }    closesocket(sListenSocket);    return 0;}// 接收连接线程UINT WINAPI MyChildThread(LPVOID lPvoid){    SOCKET sClientSocket = (SOCKET)lPvoid;    CLIENTITEM clientItem = {0};    int nCmd = HandleClientMain(sClientSocket, &amp;clientItem);        LOG_NORMAL("Client cmd = %d", nCmd);    if (nCmd == -1)        closesocket(sClientSocket);    else if (nCmd == CONN_MAIN)        LoginTrans(sClientSocket, &amp;clientItem);    else        InterTrans(sClientScoekt, &amp;clientItem, nCmd);        return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然，这种一个连接一个线程的做法也不支持高并发，当连接数达到一定量时，会创建很多MyClientThread线程，CPU在线程之间的切换也是一笔不小的开销，CPU时间片最后都浪费在各个线程的切换上了，严重影响程序的执行效率。</p><h3 id="7-4-Reactor模式"><a href="#7-4-Reactor模式" class="headerlink" title="7.4 Reactor模式"></a>7.4 Reactor模式</h3><p>Reactor模式一种事件处理设计模式，在I/O请求到达后，服务处理程序使用I/O复用技术同步地将这些请求派发给相关的请求处理程序。</p><p>一个Reactor模式结构一般包括以下模块：</p><ul><li>资源请求事件(Resource Request)</li><li>多路复用器与事件分发器(I/O Demultiplexer &amp; Event Dispatcher)</li><li>事件处理器(EventHandler)</li></ul><h3 id="7-5-one-thread-one-loop-思想"><a href="#7-5-one-thread-one-loop-思想" class="headerlink" title="7.5 one thread one loop 思想"></a>7.5 one thread one loop 思想</h3><p>one thread one loop中的线程指的是网络线程，就是说，在每个网络线程函数里面都有一个循环，每个循环的流程都如下所示，因此每个网络线程都做着同样的事情。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 线程函数void* thread_func(void* thread_arg){// 这里做一些需要的初始化工作while (线程退出标志)    {        // 步骤一：利用select/poll/epoll 等I/O复用技术分离出读写事件                // 步骤二：处理读事件或写事件                // 步骤三：做其他事情    }    // 这里做一些清理工作}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-5-线程的分工"><a href="#7-5-线程的分工" class="headerlink" title="7.5 线程的分工"></a>7.5 线程的分工</h3><p>服务器为了能够流畅处理多个客户端连接请求，一般在某些线程A(称为主线程)里面调用accept函数产生新的客户端连接并生成相应的socket，然后将这些新连接的socket传递给另外数个工作线程B1 B2 B3 B4等，这些工作线程负责处理这些新连接上的网络I/O事件，并同时处理系统中的其他一些事务。</p><p>工作线程的代码框架：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">while (!m_bQuitFlag){epoll_or_select_func();handle_io_events();handle_other_things();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主线程和工作线程分工策略的优点：</p><ol><li>线程A只需处理新来的连接即可，不用处理普通socket的网络I/O事件。</li><li>线程A接受连接产生新的socket，可以根据一定的负载均衡策略，将这些socket分配给各个工作线程。这样可以平衡资源利用率。</li><li>在工作线程不满负载的情况下，可以让工作线程处理其他任务。</li></ol><h4 id="唤醒机制的实现"><a href="#唤醒机制的实现" class="headerlink" title="唤醒机制的实现"></a>唤醒机制的实现</h4><p>想要实现的效果：如果没有网络I/O事件和其他任务要处理，那么这些工作线程直接挂起而不是空转；如果有其他任务要处理，那么这些工作线程要能立刻处理这些任务，而不是在挂起指定时间后才处理任务</p><p>解决方案：仍然给I/O复用函数设置一定的超时时间，但对于handle_other_things函数执行，会采取一种特殊的唤醒策略。如 为epollfd挂载一个特殊的fd，称为 wakeup fd。当有其他任务需要立即处理时，向这个唤醒fd上随便写入1字节的内容，这个唤醒fd就立即变成可读的了，epoll_wait函数就会立即被唤醒并返回，然后就可以马上执行handle_other_thing函数来执行任务了。</p><p>1）使用管道fd(pipe)</p><ol start="2"><li><p>使用eventfd</p></li><li><p>使用socketpair</p></li></ol><h3 id="7-6-收发数据的正确做法"><a href="#7-6-收发数据的正确做法" class="headerlink" title="7.6  收发数据的正确做法"></a>7.6  收发数据的正确做法</h3><h4 id="如何收取数据"><a href="#如何收取数据" class="headerlink" title="如何收取数据"></a>如何收取数据</h4><p>对于收取数据，在接受连接并得到clientfd后，可以将该clientfd绑定到相应的I/O复用函数上并监听其可读事件。在可读事件触发后，调用recv函数从clientfd上收取数据。</p><h4 id="如何发送数据"><a href="#如何发送数据" class="headerlink" title="如何发送数据"></a>如何发送数据</h4><p>对于发送数据，使用epoll的LT模式或其他I/O复用函数时，通常不会一开始就为clientfd注册监听可写事件的标志。因为在大多数情况下，本端的clientfd都是可写的，如果注册了监听可写事件标志，则会导致可写事件通知一直触发，而此时不一定有数据需要发送。所以，如果有数据需要发送，则一般都是先调用send或write函数直接发送，如果在发送过程中send或weite函数返回-1，并且错误码是EWOULDBLOCK(或EAGAIN)，则表明此时TCP窗口已经太小，数据无法再发送。如果仍有剩下的部分数据未发送，才会为clientfd注册监听可写事件标志，并将剩余的数据存入自定义的socket发送缓冲区中，等到写事件触发后再接着将发送缓冲区中的剩余数据发送出去。如果仍有部分数据不能发送出去，则继续注册监听可写事件标志，当已经无数据需要发送时，应该立即移除对写事件的监听。如果在监听写事件期间，业务层又产生了新的数据需要发送，就需要将这些新的数据放到刚才剩余的待发数据后面。</p><p>使用epoll ET模式时，如果需要发送数据，则每次都有为fd注册监听写事件标志。</p><h4 id="不要多个线程同时利用一个socket收发数据"><a href="#不要多个线程同时利用一个socket收发数据" class="headerlink" title="不要多个线程同时利用一个socket收发数据"></a>不要多个线程同时利用一个socket收发数据</h4><p>多个线程同时收发可能导致顺序错乱。</p><h3 id="7-7-发送、接收缓冲区的设计要点"><a href="#7-7-发送、接收缓冲区的设计要点" class="headerlink" title="7.7 发送、接收缓冲区的设计要点"></a>7.7 发送、接收缓冲区的设计要点</h3><p>无论是发送缓冲区还是接收缓冲区，一般都建议将其设计成一个内存连续的存储容器。</p><p>对于服务端程序来说，由于需要同时服务多个客户端，而每一路连接都会有一个接收缓冲区和发送缓冲区，所以不同连接从socket上读取出来但还没有被业务处理的数据，会被放在自己对应的接收缓冲区；因TCP窗口太小暂时发不出去的数据，会被存放在自己所属连接的发送缓冲区中。</p><p>缓冲区的容量上限一般是有限制的，为了节约内存，每个连接的接收缓冲区和发送缓冲区的初始容量一般都不会设置得很大。在缓冲区容量不足时应按需扩展，但一定要设置一个上限值，且这个上限值一般不会太大。</p><h4 id="服务端发送数据时对端一直不接收的问题"><a href="#服务端发送数据时对端一直不接收的问题" class="headerlink" title="服务端发送数据时对端一直不接收的问题"></a>服务端发送数据时对端一直不接收的问题</h4><p>1）为每路连接的发送缓冲区大小设置上限。如果缓冲区中的数据大小超过了规定的缓冲区容量上限，就认为该连接出了问题，关闭该连接并回收相应的资源。</p><p>2）如果因为一些原因导致一部分数据已经被积压在发送缓冲区中一段时间了，此后服务端未产生新的待发送的数据，此时发送缓冲区的数据容量未超过缓冲区上限。如果不处理的话，发送缓冲区的数据就会一直积压，浪费系统资源。可以设置一个定时器，每隔一段时间检查一下在各路连接的发送缓冲区中是否还有数据未发送出去。如果一个连接超过一定时间还存在未发送出去的数据，就认为该路连接出现问题，需要关闭该路连接并回收相应的资源。</p><h3 id="7-8-网络库的分层设计"><a href="#7-8-网络库的分层设计" class="headerlink" title="7.8 网络库的分层设计"></a>7.8 网络库的分层设计</h3><h4 id="网络库设计中的各个层"><a href="#网络库设计中的各个层" class="headerlink" title="网络库设计中的各个层"></a>网络库设计中的各个层</h4><p>1.Session层</p><p>Session层处于顶层，在设计上不属于网络框架本身，用于记录各种业务状态数据和处理各种业务逻辑。在业务逻辑处理完毕后，如果需要进行网络通信，则依赖Connection层进行数据收发。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef std::shared_ptr&lt;TcpConncetion&gt; TcpConnectionPtr;typedef const TcpConnectionPtr&amp; CTcpCoccectionPtrR;class ChatSession{public:    ChatSession(CTcpConnectionPtrR conn, int sessionid);    virtual ~ChatSession();        int32_t GetSessionId()    {        return m_id;    }        int32_t GetUserId()    {        return m_userinfo.userid;    }        std::string GetUsername()    {        return m_userinfo.username;    }        int32_t GetClientType()    {        return m_userinfo.clienttype;    }        int32_t GetUserStatus()    {        return m_userinfo.status;    }        int32_t GetUserClientType()    {        return m_userinfo.clienttype;    }        void SendUserStatusChangeMst(int32_t userid, int type, int status = 0);    private:    // 各个业务逻辑的处理方法    bool Process(CTcpConnectionPtrR conn, const char* inbuf, size_t buflength);        void OnHeartbeatResponse(CTcpConnectionPtrR conn);    void OnRegisterResponse(const std::string&amp; data, CTcpConnectionPtrR conn);    void OnLoginResponse(const std::string&amp; data, CTcpConnectionPtrR conn);    void OnGetFriendListResponse(CTcpConnectionPtrR conn);    void OnChangeUserStatusResponse(const std::string&amp; data, CTcpConnectionPtrR conn);        TcpConnectionPtr GetConnectionPtr()    {        if (m_tmpConn.expried())            return NULL;        return m_tmpConn.lock();    }        // 调用下层Connection层发送数据的方法    void Send(int32_t cmd, int32_t seq, const std::string&amp; data);    void Send(int32_t cmd, int32_t seq, const char* data, int32_t dataLength);    void Send(const std::string&amp; p);    void Send(const char* p, int32_t length);    private:    int32_tm_id;// session id    OnlineUserInfom_userinfo;// 该session对应的用户信息    int32_tm_seq;// 当前session数据包的序列号    boolm_isLogin;// 当前session对应的用户是否已登录        // 引用下层Connection层的成员变量 但不管了TcpConnection对象的生命周期    std::weak_ptr&lt;TcpConnection&gt;m_tmpConn;};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.Connection层</p><p>Connection层是技术层的顶层，每一路客户端连接都对应一个Connection对象，该层一般用于记录连接的各种状态信息。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class TcpConnection{public:TcpConnection(EventLoop* loop,                 const string&amp; name,                 int sockfd,                 const InetAddress&amp; localAddr,                 const InetAddress&amp; peerAddr);    ~TcpConnection();        const InetAddress&amp; localAddress() const { return m_localAddr;}    const InetAddress&amp; peerAddress() const { return m_perAddr;}    bool connected() const { return m_state == kConnected;}        void send(const void* message, int len);    void send(const string&amp; message);    void send(Buffer* message);    void shutdown();        void forceClose();        void setConnectionCallback(const ConnectionCallback&amp; cb);    void setMessageCallback(const MessageCallback&amp; cb);    void setCloseCallback(const CloseCallback&amp; cb);    void setErrorCallback(const ErrorCallback&amp; cb);        Buffer* getInputBuffer();    Buffer* getOutputBuffer();    private:    enum StateE { kDisconnected, kConnecting, kConnected, kDisconnecting };    void handleRead(Timestamp receiveTime);    void handleWrite();    void handleClose();    void handleError();    void sendInLoop(const string&amp; message);    void sendInLoop(const void* message, size_t len);    void shutdownInLoop();    void forceCloseInLoop();    void setState(StateE s) { m_state = s; }    private:    // 连接状态信息    StateEm_state;    // 引用Channel对象    std::shared_ptr&lt;Channel&gt; m_spChannel;    // 本端的地址信息    const InetAddressm_localAddr;    // 对端的地址信息    const InetAddressm_peerAddr;        ConnectionCallbackm_connectionCallback;    MessageCallbackm_messageCallback;    CloseCallbackm_closeCallback;    ErrorCallbackm_errorCallback;        // 接收缓冲区    Bufferm_inputBuffer;    // 发送缓冲区    Bufferm_outputBuffer;    // 流量统计类    CFlowStatisticsm_flowStatistics;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.Channel层</p><p>Channel层一般持有一个socket句柄，是实际进行数据收发的地方，因而一个Channel对象会记录当前需要监听的各种网络事件的状态，同时提供对这些事件状态的查询和增删改接口。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Channel{public:    Channel(EventLoop* loop, int fd);    ~Channel();        void handleEvent(Timestamp receiveTime);        int fd() const;    int events() const;    void setRevents(int revt);    void addRevent(int revt);    void removeEvents();    bool isNoneEvent() const;        bool enableReading();    bool disableReading();    bool enableWriting();    bool disableWriting();    bool diaableAll();        bool isWriting() const;    private:    const int m_fd;// 当前需要检测的事件    intm_events; // 处理后的事件    int m_revents;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.Socket层</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">namespace sockets{#ifdef WIN32#elsetypedef int SOCKET;#endifSOCKET createOrDie();    SOCKET createNonblockingOrDie();        void setNonBlockAndCloseOnExec(SOCKET sockfd);        void setReuseAddr(SOCKET sockfd, bool on);    void setReusePort(SOCKET sockfd, bool on);        int connect(SOCKET sockfd, const struct sockaddr_in&amp; addr);    void bindOrDie(SOCKET sockfd, const struct sockaddr_in&amp; addr);    void listenOrDie(SOCKET sockfd);    int accept(SOCKET sockfd, struct sockaddr_in* addr);    int32_t read(SOCKET sockfd, void *buf, int32_t count);    ssize_t readv(SOCKET sockfd, const struct iovec *iov, int iovcnt);    int32_t write(SOCKET sockfd, const void *buf, int32_t count);    void close(SOCKET sockfd);    void shutdownWrite(SOCKET sockfd);        void toIpPort(char* buf, size_t size, const struct sockaddr_in&amp; addr);    void toIp(char* buf, size_t size, const struct sockaddr_in&amp; addr);    void fromIpPort(const char* ip, uint16_t port, struct sockaddr_in* addr);        int getSocketError(SOCKET sockfd);        struct sockaddr_in getLocalAddr(SOCKET sockfd);    struct sockaddr_in getPeerAddr(SOCKET sockfd);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 网络编程 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebRTC客户端(一) WebRTC架构</title>
      <link href="/2022/07/05/webrtc-ke-hu-duan-yi-webrtc-jia-gou/"/>
      <url>/2022/07/05/webrtc-ke-hu-duan-yi-webrtc-jia-gou/</url>
      
        <content type="html"><![CDATA[<h2 id="WebRTC整体架构"><a href="#WebRTC整体架构" class="headerlink" title="WebRTC整体架构"></a>WebRTC整体架构</h2><img src="/2022/07/05/webrtc-ke-hu-duan-yi-webrtc-jia-gou/image-20220616150935297.png" class="" title="image-20220616150935297"><h2 id="WebRTC目录结构"><a href="#WebRTC目录结构" class="headerlink" title="WebRTC目录结构"></a>WebRTC目录结构</h2><img src="/2022/07/05/webrtc-ke-hu-duan-yi-webrtc-jia-gou/image-20220616151953427.png" class="" title="image-20220616151953427"><img src="/2022/07/05/webrtc-ke-hu-duan-yi-webrtc-jia-gou/image-20220616152128809.png" class="" title="image-20220616152128809"><h2 id="WebRTC-Modules目录"><a href="#WebRTC-Modules目录" class="headerlink" title="WebRTC Modules目录"></a>WebRTC Modules目录</h2><img src="/2022/07/05/webrtc-ke-hu-duan-yi-webrtc-jia-gou/image-20220616152630603.png" class="" title="image-20220616152630603"><img src="/2022/07/05/webrtc-ke-hu-duan-yi-webrtc-jia-gou/image-20220616152810130.png" class="" title="image-20220616152810130"><h2 id="WebRTC运行机制"><a href="#WebRTC运行机制" class="headerlink" title="WebRTC运行机制"></a>WebRTC运行机制</h2><h3 id="轨与流"><a href="#轨与流" class="headerlink" title="轨与流"></a>轨与流</h3><ul><li>Track 轨 各个轨之间保持平行</li><li>MediaStream 流 每个流里面包括了多条轨</li></ul><h3 id="WebRTC重要的类"><a href="#WebRTC重要的类" class="headerlink" title="WebRTC重要的类"></a>WebRTC重要的类</h3><ul><li>MediaStream</li><li>RTCPeerConnection </li><li>RTCDataChannel 非音视频的数据通过这个类进行传输</li></ul><h3 id="PeerConnection调用过程"><a href="#PeerConnection调用过程" class="headerlink" title="PeerConnection调用过程"></a>PeerConnection调用过程</h3><img src="/2022/07/05/webrtc-ke-hu-duan-yi-webrtc-jia-gou/image-20220616160704314.png" class="" title="image-20220616160704314"><h3 id="调用时序图"><a href="#调用时序图" class="headerlink" title="调用时序图"></a>调用时序图</h3><img src="/2022/07/05/webrtc-ke-hu-duan-yi-webrtc-jia-gou/image-20220616165550065.png" class="" title="image-20220616165550065">]]></content>
      
      
      <categories>
          
          <category> 音视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebRTC </tag>
            
            <tag> 音视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步IO事件处理</title>
      <link href="/2022/07/05/yi-bu-io-shi-jian-chu-li/"/>
      <url>/2022/07/05/yi-bu-io-shi-jian-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="一、通过fork的方式实现高性能网络服务器"><a href="#一、通过fork的方式实现高性能网络服务器" class="headerlink" title="一、通过fork的方式实现高性能网络服务器"></a>一、通过fork的方式实现高性能网络服务器</h2><ul><li>每收到一个连接就创建一个子进程</li><li>父进程负责接收连接</li><li>通过fork创建子进程</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;unistd.h&gt;#include &lt;netinet/in.h&gt;#include &lt;sys/socket.h&gt;#include &lt;string.h&gt;#define PORT 8111#define MESSAGE_LEN 1024int main(int argc, char* argv[]){    int ret = -1;    int on = 1;    int backlog = 10;    pid_t pid;    int socket_fd, accept_fd;    struct sockaddr_in localaddr, remoteaddr;    char in_buff[MESSAGE_LEN] = {0,};    socket_fd = socket(AF_INET, SOCK_STREAM, 0);    if (socket_fd == -1){        std::cout &lt;&lt; "Failed to create socket!" &lt;&lt; std::endl;        exit(-1);    }    ret = setsockopt(socket_fd, SOL_SOCKET, SO_REUSEADDR, &amp;on, sizeof(on));    if (ret == -1) {        std::cout &lt;&lt; "Failed to set socket options!" &lt;&lt; std::endl;    }    localaddr.sin_family = AF_INET;    localaddr.sin_port = PORT;    localaddr.sin_addr.s_addr = INADDR_ANY;    bzero(&amp;(localaddr.sin_zero), 8);    ret = bind(socket_fd, (struct sockaddr *)&amp;localaddr, sizeof(struct    sockaddr));    if (ret == -1) {        std::cout &lt;&lt; "Failed to bind addr!" &lt;&lt; std::endl;        exit(-1);    }    ret = listen(socket_fd, backlog);    if (ret == -1) {        std::cout &lt;&lt; "Failed to listen socket!" &lt;&lt; std::endl;        exit(-1);    }    for (;;) {        socklen_t addr_len = sizeof(struct sockaddr);        accept_fd = accept(socket_fd, (struct sockaddr *) &amp;remoteaddr,        &amp;addr_len);        pid = fork();        if (pid == 0) {            for (;;) {                ret = recv(accept_fd, (void *)in_buff, MESSAGE_LEN, 0);                if (ret == 0) {                    break;                }                std::cout &lt;&lt; "recv:" &lt;&lt; in_buff &lt;&lt; std::endl;                  send(accept_fd, (void*)in_buff, MESSAGE_LEN, 0);            }        }    }    if (pid != 0) {        close(accept_fd);    }    return 0;}  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fork方式带来的问题</p><ul><li>资源被长期占用</li><li>分配子进程花费时间长</li></ul><h2 id="二、通过select实现高性能网络服务器"><a href="#二、通过select实现高性能网络服务器" class="headerlink" title="二、通过select实现高性能网络服务器"></a>二、通过select实现高性能网络服务器</h2><h4 id="什么是异步io"><a href="#什么是异步io" class="headerlink" title="什么是异步io"></a>什么是异步io</h4><p>异步io是指以事件触发的机制来对io操作进行处理</p><p>与多进程和多线程技术相比，异步io技术的最大优势的系统开销小，系统不必创建进程/线程，也不必维护这些进程/线程，从而大大减少了系统的开销</p><h4 id="select方式实现"><a href="#select方式实现" class="headerlink" title="select方式实现"></a>select方式实现</h4><ul><li>遍历文件描述符集中的所有描述符，找出有变化的描述符</li><li>对于监听的socket和数据处理的socket要区别对待</li><li>socket必须设置为非阻塞方式工作</li></ul><h4 id="重要API"><a href="#重要API" class="headerlink" title="重要API"></a>重要API</h4><pre class="line-numbers language-none"><code class="language-none">FD_ZERO\FD_SET\FD_ISSET<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">flag fcntl(fd, F_SETFL/F_GETFL, flag)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">events select(nfds, readfds, writefds, exceptfds, timeout)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="select函数输入参数的意义"><a href="#select函数输入参数的意义" class="headerlink" title="select函数输入参数的意义"></a>select函数输入参数的意义</h4><ul><li>需要关注的文件描述符</li><li>对每个文件描述符需要关注的状态（读、写、异常）</li><li>要等待的时间（永远、一段时间、不等待）</li></ul><h4 id="从select函数得到的信息"><a href="#从select函数得到的信息" class="headerlink" title="从select函数得到的信息"></a>从select函数得到的信息</h4><ul><li>已经做好准备的文件描述符的个数</li><li>对于读、写、异常，哪些文件描述符准备好了</li></ul><h4 id="理解select模型"><a href="#理解select模型" class="headerlink" title="理解select模型"></a>理解select模型</h4><ul><li>理解select模型的关键在于理解fd_set类型</li><li>fd_set就是多个整形字的集合，每个bit代表一个文件描述符</li><li>FD_ZERO表示将所有位置0</li><li>FD_SET是将fd_set中的某一位置1</li><li>select函数执行后，系统会修改fd_set中的内容</li><li>select函数执行后，应用层要重新设置fd_set中的内容</li></ul><h2 id="三、通过epoll实现高性能网络服务器"><a href="#三、通过epoll实现高性能网络服务器" class="headerlink" title="三、通过epoll实现高性能网络服务器"></a>三、通过epoll实现高性能网络服务器</h2><h4 id="使用epoll的好处"><a href="#使用epoll的好处" class="headerlink" title="使用epoll的好处"></a>使用epoll的好处</h4><ul><li>没有文件描述符的限制</li><li>工作效率不会随着文件描述符的增加而下降 </li><li>epoll经过系统优化更加高效</li></ul><h4 id="epoll事件的触发模式"><a href="#epoll事件的触发模式" class="headerlink" title="epoll事件的触发模式"></a>epoll事件的触发模式</h4><ul><li>水平触发 如果没有即时处理，则反复触发</li><li>边缘触发 只触发一次</li></ul><h4 id="epoll重要的API"><a href="#epoll重要的API" class="headerlink" title="epoll重要的API"></a>epoll重要的API</h4><pre class="line-numbers language-none"><code class="language-none">int epoll_create() 参数无意义，可忽略<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">int epoll_ctl(epfd, op, fd, struct epoll_event *event)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">int epoll_wait(epfd, events, maxevents, timeout)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="epoll事件"><a href="#epoll事件" class="headerlink" title="epoll事件"></a>epoll事件</h4><ul><li>EPOLLET设置为边缘触发</li><li>EPOLLIN     设置读事件</li><li>EPOLLOUT   设置写事件</li></ul><h4 id="epoll-ctl相关操作"><a href="#epoll-ctl相关操作" class="headerlink" title="epoll_ctl相关操作"></a>epoll_ctl相关操作</h4><ul><li>EPOLL_CTL_ADD</li><li>EPOLL_CTL_MOD</li><li>EPOLL_CTL_DEL</li></ul><h4 id="异步事件的惊群现象"><a href="#异步事件的惊群现象" class="headerlink" title="异步事件的惊群现象"></a>异步事件的惊群现象</h4><h2 id="四、通过I-x2F-O事件处理库来实现高性能网络服务器"><a href="#四、通过I-x2F-O事件处理库来实现高性能网络服务器" class="headerlink" title="四、通过I/O事件处理库来实现高性能网络服务器"></a>四、通过I/O事件处理库来实现高性能网络服务器</h2><h4 id="libevent"><a href="#libevent" class="headerlink" title="libevent"></a>libevent</h4><h4 id="libevent重要函数"><a href="#libevent重要函数" class="headerlink" title="libevent重要函数"></a>libevent重要函数</h4><ul><li>event_base_new 创建epoll实例 初始化</li><li>event_base_dispatch 相当于epoll_wait</li><li>event_new event_add event_del event_free</li><li>evconnlistener_new_bind</li></ul><h4 id="libevent编译与安装"><a href="#libevent编译与安装" class="headerlink" title="libevent编译与安装"></a>libevent编译与安装</h4><ul><li><a href="http://libevent.org/">http://libevent.org/</a></li><li>wget -c addr –no-check-certificate</li><li>./configure –prefix=/usr/local/libevent</li><li>make &amp;&amp; sudo make install</li><li>设置环境变量</li></ul><pre class="line-numbers language-none"><code class="language-none">unset PKG_CONFIT_LIBexport PKG_CONFIG_PATH=/usr/local/libevent/lib/pkgconfig:$PKG_CONFIG_PATHexport LD_LIBRARY_PATH=/usr/local/libevent/lib:$LD_LIBRARY_PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2022/07/05/yi-bu-io-shi-jian-chu-li/image-20220610210036660.png" class="" title="image-20220610210036660"><h4 id="buferevent的作用"><a href="#buferevent的作用" class="headerlink" title="buferevent的作用"></a>buferevent的作用</h4><ul><li>从外面看，它就是一个缓冲区，可以与socket绑定</li><li>内部由输入和输出缓冲区组成</li><li>每一个socket对应一个bufferevent</li><li>当socket有事件触发时，可以设置回调函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> 音视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音视频 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>直播平台技术原理</title>
      <link href="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/"/>
      <url>/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="直播平台技术原理"><a href="#直播平台技术原理" class="headerlink" title="直播平台技术原理"></a>直播平台技术原理</h1><h2 id="直播相关基础知识"><a href="#直播相关基础知识" class="headerlink" title="直播相关基础知识"></a>直播相关基础知识</h2><h3 id="图片原始采样数据–RGB"><a href="#图片原始采样数据–RGB" class="headerlink" title="图片原始采样数据–RGB"></a>图片原始采样数据–RGB</h3><p>RGB格式：每一个数据单元表示RGB三原色，用各原色其所占位数来表示</p><p>RGB888(24位色)</p><p>RGB565(16位色)</p><p>为什么RGB565要多留一位给绿色G？</p><p>人眼大约有1.2亿个视杆细胞和600万个视锥细胞。视杆细胞感知光度，视锥细胞有三种，分别对不同波长的光敏感（蓝绿红）。</p><p>视杆细胞对绿色波段最为敏感。人眼对光度的敏感度远大于颜色。</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024193326848.png" class="" title="image-20211024193326848"><h3 id="亮度、色度模型数据–YUV"><a href="#亮度、色度模型数据–YUV" class="headerlink" title="亮度、色度模型数据–YUV"></a>亮度、色度模型数据–YUV</h3><p>YUV颜色空间是从RGB颜色空间推导而来。</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024193427601.png" class="" title="image-20211024193427601"><p>YUV3种采样模式：444，422，420。数字表示Y、U、V三个分量的采样比。</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024193529635.png" class="" title="image-20211024193529635"><p>YUV420比RGB888节约四分之三的空间</p><h3 id="为什么需要视频编解码？"><a href="#为什么需要视频编解码？" class="headerlink" title="为什么需要视频编解码？"></a>为什么需要视频编解码？</h3><p>不考虑音频的情况下，一段1小时1080P的纯视频未编码原始数据(RGB888)大小为500G.</p><h3 id="如何进行编码？"><a href="#如何进行编码？" class="headerlink" title="如何进行编码？"></a>如何进行编码？</h3><p>视频冗余信息</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024194005467.png" class="" title="image-20211024194005467"><p>冗余信息分析–分组、分块</p><h3 id="视频帧的类型"><a href="#视频帧的类型" class="headerlink" title="视频帧的类型"></a>视频帧的类型</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024194824732.png" class="" title="image-20211024194824732"><p>B帧不适合用于直播场景。因为没有下一帧信息。</p><h3 id="帧的编码方式"><a href="#帧的编码方式" class="headerlink" title="帧的编码方式"></a>帧的编码方式</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024195154446.png" class="" title="image-20211024195154446"><p>对I帧的处理，是采用<strong>帧内编码方式</strong>，只利用本帧图像内的空间相关性。</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024195347314.png" class="" title="image-20211024195347314"><p>对P帧的处理，采用<strong>帧间编码</strong>（运动估计和补偿），同时利用空间和时间上的相关性。</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024195446313.png" class="" title="image-20211024195446313"><h3 id="量化"><a href="#量化" class="headerlink" title="量化"></a>量化</h3><p>通过用更粗糙的数据表示精细的数据来降低编码的数据量，或者通过去除人眼不敏感的信息来降低编码数据量。</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024195857629.png" class="" title="image-20211024195857629"><h3 id="编码过程"><a href="#编码过程" class="headerlink" title="编码过程"></a>编码过程</h3><p>1.每一帧原始采样分块</p><p>2.图片分组</p><p>​有差别的像素只有10%以内的点，亮度差值变化不超过2%，而色度差值变化只有1%以内</p><p>​一组称为一个GOP（包括一份I帧和多份P/B帧）</p><p>3.逐帧编码</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024200233108.png" class="" title="image-20211024200233108"><h3 id="封装格式"><a href="#封装格式" class="headerlink" title="封装格式"></a>封装格式</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024200824876.png" class="" title="image-20211024200824876"><h3 id="网络传输协议"><a href="#网络传输协议" class="headerlink" title="网络传输协议"></a>网络传输协议</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024201249972.png" class="" title="image-20211024201249972"><h3 id="整体回顾"><a href="#整体回顾" class="headerlink" title="整体回顾"></a>整体回顾</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024201648477.png" class="" title="image-20211024201648477"><h2 id="如何搭建一套直播系统"><a href="#如何搭建一套直播系统" class="headerlink" title="如何搭建一套直播系统"></a>如何搭建一套直播系统</h2><h3 id="基础直播系统结构"><a href="#基础直播系统结构" class="headerlink" title="基础直播系统结构"></a>基础直播系统结构</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024202202871.png" class="" title="image-20211024202202871"><h3 id="客户端推流处理过程"><a href="#客户端推流处理过程" class="headerlink" title="客户端推流处理过程"></a>客户端推流处理过程</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024202246829.png" class="" title="image-20211024202246829"><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024202258180.png" class="" title="image-20211024202258180"><p>软编码：使用CPU进行编码，通过软件代码来实现音视频编解码算法，如FFMpeg,GPUImage等。</p><p>硬编码：使用非CPU的硬件芯片或电路实现编码算法，通过调用编解码芯片提供的API来实现，如安卓的MediaCodec等。</p><p>现在的智能手机的“芯片”从严格意义上说其实已经不是单纯一个CPU，而是SoC，由CPU，GPU，DSP等芯片集成在一起。</p><h3 id="RTMP协议推流过程–握手"><a href="#RTMP协议推流过程–握手" class="headerlink" title="RTMP协议推流过程–握手"></a>RTMP协议推流过程–握手</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024203037221.png" class="" title="image-20211024203037221"><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024203043508.png" class="" title="image-20211024203043508"><h3 id="RTMP协议推流过程–推流"><a href="#RTMP协议推流过程–推流" class="headerlink" title="RTMP协议推流过程–推流"></a>RTMP协议推流过程–推流</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024203241492.png" class="" title="image-20211024203241492"><h3 id="RTMP协议报文格式"><a href="#RTMP协议报文格式" class="headerlink" title="RTMP协议报文格式"></a>RTMP协议报文格式</h3><p>RTMP协议中一块有完整意义的单位是“消息”，但一段“消息”在网上传输时被拆分成“消息块(Chunk)”，每块一般固定128字节(不含分块头)，最后一块(同一段报文的)可以小于128字节。</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024203539974.png" class="" title="image-20211024203539974"><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024203549408.png" class="" title="image-20211024203549408"><h3 id="服务端处理过程"><a href="#服务端处理过程" class="headerlink" title="服务端处理过程"></a>服务端处理过程</h3><p>基础流媒体服务器主要包含几个功能：信令处理；视频流处理(转码、转封装、接&amp;拉流)；视频文件存储</p><p>流媒体服务器有大量成熟解决方案（开源、商业化）：如 SRS\NGINX\CRTMPD\AMS\WOWZA等</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024204519607.png" class="" title="image-20211024204519607"><h3 id="整体开源解决方案"><a href="#整体开源解决方案" class="headerlink" title="整体开源解决方案"></a>整体开源解决方案</h3><p>基于OBS （PC强大的采集工具）+ SRS（开源流媒体服务器）可以快速搭建一套直播模型。</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024205130563.png" class="" title="image-20211024205130563"><h2 id="从原型到千万DAU的直播平台"><a href="#从原型到千万DAU的直播平台" class="headerlink" title="从原型到千万DAU的直播平台"></a>从原型到千万DAU的直播平台</h2><h3 id="直播平台基础架构图"><a href="#直播平台基础架构图" class="headerlink" title="直播平台基础架构图"></a>直播平台基础架构图</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024205352095.png" class="" title="image-20211024205352095"><h3 id="流媒体服务器集群"><a href="#流媒体服务器集群" class="headerlink" title="流媒体服务器集群"></a>流媒体服务器集群</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024205542614.png" class="" title="image-20211024205542614"><h3 id="业务服务框架-TAF"><a href="#业务服务框架-TAF" class="headerlink" title="业务服务框架-TAF"></a>业务服务框架-TAF</h3><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024205916508.png" class="" title="image-20211024205916508"><p>IDL:接口定义语言JCE</p><p>RPC:同步、异步、单向</p><p>高性能：负载均衡算法、过载保护、熔断等</p><p>可伸缩：支持水平扩容</p><p>服务治理：部署、发布、扩/缩容、测试、配置中心、监控等</p><h3 id="其他需要具备的能力"><a href="#其他需要具备的能力" class="headerlink" title="其他需要具备的能力"></a>其他需要具备的能力</h3><p>日志处理</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024210436277.png" class="" title="image-20211024210436277"><p>链接通道</p><img src="/2022/07/05/zhi-bo-ping-tai-ji-zhu-yuan-li/image-20211024210452900.png" class="" title="image-20211024210452900">]]></content>
      
      
      <categories>
          
          <category> 音视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次创建自己的博客</title>
      <link href="/2022/07/05/di-yi-ci-chuang-jian-zi-ji-de-bo-ke/"/>
      <url>/2022/07/05/di-yi-ci-chuang-jian-zi-ji-de-bo-ke/</url>
      
        <content type="html"><![CDATA[<hr><p>​今天使用Hexo在GitHub上搭建了自己的博客，忙活了大半天，各种下插件，调参数，弄完之后自我感觉效果还可以，虽然大部分是直接用的大佬的模板。</p><p>​后面我会陆续将之前做的一些笔记归纳上传到这个博客中，并记录自己在学习和生活中遇到的困难和得到的收获。</p><p>hexo常用操作：</p><ul><li><p>hexo new post “article title”</p><p>创建新文章</p></li><li><p>hexo s等价于 hexo server </p><p>#Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</p></li><li><p>hexo g 等价于 hexo generate </p><p>生成静态网页 (执行 $ hexo g 后会在站点根目录下生成public&gt;文件夹, hexo会将”&lt;font /blog/source/“ 下面的.md后缀的文件编译为.html后缀的文件,存放在”/blog/public/ “ 路径下)</p></li><li><p>hexo d 等价于 hexo deploy </p><p>#将本地数据部署到远端服务器(如github)</p></li><li><p>hexo clean </p><p>#清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
